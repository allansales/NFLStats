games_context = read_csv("games_context.csv")
power_rankings = read_csv("power_rankings.csv")
power_rankings = power_rankings %>% select(Team_target = team, Season = year, Week = week, human_rank = rank, Previous_Rank, Rank_change) %>% filter(Season == 2015, Week %in% 1:17)
power_rankings$Week = power_rankings$Week %>% as.integer()
train = games_context %>% filter(Season <= 2014)
test = games_context %>% filter(Season > 2014)
test_clean_data = test %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
train_clean_data = train %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = train_clean_data, method = "lm", trControl = ctrl, metric="Rsquared")
residuals = resid(lmCVFit)
predictedValues = predict(lmCVFit)
predictedVal = predict(lmCVFit, test_clean_data)
modelvalues = data.frame(obs = test_clean_data$Rank_change, pred=predictedVal)
plot(train_clean_data$Rank_change, residuals)
plot(varImp(lmCVFit))
defaultSummary(modelvalues)
saveRDS(lmCVFit, "power_ranking_variations.rds")
test_human_based = get_full_rank(test, update_next_week = F)
model_rank = test_human_based %>% select(Season, Week, Team_target, model_rank = rank)
ranks = power_rankings %>% inner_join(model_rank) %>% arrange(Season, Week, model_rank)
corr_1 = ranks %>% group_by(Season, Week) %>% summarise(Correlation = cor.test(human_rank, model_rank, method = "spearman", alternative = "two.sided")$estimate)
test_machine_based = get_full_rank(test)
model_rank = test_machine_based %>% select(Season, Week, Team_target, model_rank = rank)
ranks = power_rankings %>% inner_join(model_rank) %>% arrange(Season, Week, model_rank)
corr_2 = ranks %>% group_by(Season, Week) %>% summarise(Correlation = cor.test(human_rank, model_rank, method = "spearman", alternative = "two.sided")$estimate)
games_context = games_context %>% mutate(Game_winner = if_else(Team_target_score > Team_adversary_score, Team_target,
if_else(Team_target_score < Team_adversary_score, Team_adversary, "Draw")))
expected_winner_model = test %>% rowwise() %>% do(expected_winner = get_winner_based_on_power_rank(test_machine_based, .$Team_target, .$Team_adversary, .$Season, .$Week ))
expected_winner_model = test %>% rowwise() %>% do(expected_winner = get_winner_based_on_power_rank(test_machine_based, .$Team_target, .$Team_adversary, .$Season, .$Week ))
expected_winner_model
expected_winner_human = test %>% rowwise() %>% do(expected_winner = get_winner_based_on_power_rank(power_rankings, .$Team_target, .$Team_adversary, .$Season, .$Week ))
expected_winner_human
expected_winner_model$expected_winner
expected_winner_model$expected_winner %>% unlist()
library(caret)
library(tidyverse)
insert_at_position = function(vector, bye_teams_rank){
n = nrow(bye_teams_rank)
elements_to_insert = bye_teams_rank$Team_target
position_to_insert = bye_teams_rank$rank
for(pos in 1:n){
vector = vector %>% append(elements_to_insert[pos],(position_to_insert[pos]-1))
}
return(vector)
}
get_week_rank <- function(test_machine_based, week_games, prediction_s_w, week){
all_teams = test_machine_based$Team_target %>% unique()
bye_teams = setdiff(all_teams, week_games$Team_target)
bye_teams_rank = test_machine_based %>% filter(Week == (week-1), Team_target %in% bye_teams) %>% select(Team_target, rank)
partial_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(partial_rank = (prediction_s_w + week_games$Previous_Rank) %>% rank()) %>% arrange(partial_rank)
final_rank_position = partial_rank$Team_target
if(length(final_rank_position)!= 32){ #32 total of teams
final_rank_position = insert_at_position(partial_rank$Team_target, bye_teams_rank)
}
final_rank = data_frame(Season = partial_rank$Season %>% unique(), Week = partial_rank$Week %>% unique(), Team_target = final_rank_position, rank = 1:32)
return(final_rank)
}
update_data_frame = function(full_data, replacement_data, update_next_week){
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
# update rank_change
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w = full_data_s_w %>% right_join(replacement_data) %>% mutate(Previous_Rank = if_else(is.na(Previous_Rank),rank,Previous_Rank), Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(Season == season, Week != week)
full_data = full_data %>% bind_rows(full_data_s_w)
# update previous_rank of next week
if(((week+1) <= max(full_data$Week)) & update_next_week){
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
full_data_s_next_w = full_data_s_next_w %>% right_join(replacement_data %>% select(Previous_Rank = rank, -Week, Season, Team_target))
full_data = full_data %>% filter(Season == season, Week != (week+1))
full_data = full_data %>% bind_rows(full_data_s_next_w)
}
return(full_data)
}
get_full_rank = function(test, update_next_week = T){
test_rank = test
max_season = max(test_rank$Season)
min_season = min(test_rank$Season)
max_week = max(test_rank$Week)
min_week = min(test_rank$Week)
for(s in min_season:max_season){
for(w in min_week:max_week){
week_games = test_rank %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = get_week_rank(test_rank, week_games, prediction_s_w, w)
test_rank = update_data_frame(test_rank, new_rank, update_next_week = T)
}
}
test_rank = test_rank %>% select(Season, Week, Team_target, rank, Previous_Rank, Rank_change)
}
get_winner_based_on_power_rank = function(power_ranking, home_team, adversary, season, week){
pw = power_ranking %>% filter(Week == week, Season == season)
home_rank = pw %>% filter(Team_target == home_team) %>% select(Previous_Rank) %>% as.integer()
adversary_rank = pw %>% filter(Team_target == adversary) %>% select(Previous_Rank) %>% as.integer()
if(home_rank > adversary_rank){
return(home_team)
}
return(adversary)
}
games_context = read_csv("games_context.csv")
games_context = games_context %>% mutate(Game_winner = if_else(Team_target_score > Team_adversary_score, Team_target,
if_else(Team_target_score < Team_adversary_score, Team_adversary, "Draw")))
library(tidyverse)
game_results = read_csv("nfl_game_results.csv")
game_results = game_results %>% select(Date, `Home Team`, `Away Team`, `Home Score`, `Away Score`)
get_season = function(date){
month = format(date, "%m") %>% as.integer()
year = format(date, "%Y") %>% as.integer()
if(month < 3){
return(year - 1)
}
return(year)
}
game_results = game_results %>% rowwise %>% mutate(Season = get_season(Date))
get_week = function(dates){
DAY_BEFORE = 1
dif_of_weeks = difftime(dates, min(dates)-DAY_BEFORE, units = "weeks") %>% as.integer()
week = dif_of_weeks + 1
week
}
game_results = game_results %>% group_by(Season) %>% mutate(Week = get_week(Date))
game_results$Day_of_week = weekdays(game_results$Date)
game_results$Type = with(game_results, if_else(Week <= 17, "Regular Season",
if_else(Week == 18, "Wild Card",
if_else(Week == 19, "Divisional",
if_else(Week == 20, "Conference",
"Super Bowl")))))
power_rankings = read_csv("python_crawlers/crawlers/spiders/nfl.csv")
preseason_rankings =  power_rankings %>% filter(week == 0)
power_rankings = power_rankings %>% filter(week %in% 0:17)
power_rankings$week = power_rankings$week %>% as.integer()
get_previous_rank <- function(data, week_number, team_name, season_year, data_consult){
if(week_number == 0){
previous_rank = 0
} else {
previous_rank = data_consult %>% filter(week == (week_number-1), team == team_name, year == season_year) %>% select(rank) %>% as.integer()
}
return(previous_rank)
}
previous = power_rankings %>% group_by(team, year) %>% rowwise() %>% do(Previous_Rank = get_previous_rank(., .$week, .$team, .$year, power_rankings))
power_rankings = power_rankings %>% bind_cols(Previous_Rank = previous$Previous_Rank %>% unlist()) %>% mutate(Rank_change = rank - Previous_Rank)
teams_results = game_results %>% select(Date, Team_target =`Home Team`, Team_adversary = `Away Team`, Team_target_score =`Home Score`, Team_adversary_score =`Away Score`, Season, Week, Day_of_week, Type)
teams_results_2 = game_results %>% select(Date, Team_target = `Away Team`, Team_adversary =`Home Team`, Team_target_score =`Away Score`, Team_adversary_score =`Home Score`, Season, Week, Day_of_week, Type)
teams_results = rbind(teams_results, teams_results_2)
games_context = teams_results %>% inner_join(power_rankings, by = c("Team_target" = "team", "Season" = "year", "Week" = "week"))
games_context = games_context %>% inner_join(power_rankings %>% rename_at(vars(-team, -year, -week),function(x) paste0(x,"_adversary")), by = c("Team_adversary" = "team", "Season" = "year", "Week" = "week"))
games_context = games_context %>% mutate(Game_winner = if_else(Team_target_score > Team_adversary_score, Team_target,
if_else(Team_target_score < Team_adversary_score, Team_adversary, "Draw")))
write_csv(games_context, "games_context.csv")
write_csv(power_rankings, "power_rankings.csv")
library(caret)
library(tidyverse)
insert_at_position = function(vector, bye_teams_rank){
n = nrow(bye_teams_rank)
elements_to_insert = bye_teams_rank$Team_target
position_to_insert = bye_teams_rank$rank
for(pos in 1:n){
vector = vector %>% append(elements_to_insert[pos],(position_to_insert[pos]-1))
}
return(vector)
}
get_week_rank <- function(test_machine_based, week_games, prediction_s_w, week){
all_teams = test_machine_based$Team_target %>% unique()
bye_teams = setdiff(all_teams, week_games$Team_target)
bye_teams_rank = test_machine_based %>% filter(Week == (week-1), Team_target %in% bye_teams) %>% select(Team_target, rank)
partial_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(partial_rank = (prediction_s_w + week_games$Previous_Rank) %>% rank()) %>% arrange(partial_rank)
final_rank_position = partial_rank$Team_target
if(length(final_rank_position)!= 32){ #32 total of teams
final_rank_position = insert_at_position(partial_rank$Team_target, bye_teams_rank)
}
final_rank = data_frame(Season = partial_rank$Season %>% unique(), Week = partial_rank$Week %>% unique(), Team_target = final_rank_position, rank = 1:32)
return(final_rank)
}
update_data_frame = function(full_data, replacement_data, update_next_week){
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
# update rank_change
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w = full_data_s_w %>% right_join(replacement_data) %>% mutate(Previous_Rank = if_else(is.na(Previous_Rank),rank,Previous_Rank), Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(Season == season, Week != week)
full_data = full_data %>% bind_rows(full_data_s_w)
# update previous_rank of next week
if(((week+1) <= max(full_data$Week)) & update_next_week){
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
full_data_s_next_w = full_data_s_next_w %>% right_join(replacement_data %>% select(Previous_Rank = rank, -Week, Season, Team_target))
full_data = full_data %>% filter(Season == season, Week != (week+1))
full_data = full_data %>% bind_rows(full_data_s_next_w)
}
return(full_data)
}
get_full_rank = function(test, update_next_week = T){
test_rank = test
max_season = max(test_rank$Season)
min_season = min(test_rank$Season)
max_week = max(test_rank$Week)
min_week = min(test_rank$Week)
for(s in min_season:max_season){
for(w in min_week:max_week){
week_games = test_rank %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = get_week_rank(test_rank, week_games, prediction_s_w, w)
test_rank = update_data_frame(test_rank, new_rank, update_next_week = T)
}
}
test_rank = test_rank %>% select(Season, Week, Team_target, rank, Previous_Rank, Rank_change)
}
get_winner_based_on_power_rank = function(power_ranking, home_team, adversary, season, week){
pw = power_ranking %>% filter(Week == week, Season == season)
home_rank = pw %>% filter(Team_target == home_team) %>% select(Previous_Rank) %>% as.integer()
adversary_rank = pw %>% filter(Team_target == adversary) %>% select(Previous_Rank) %>% as.integer()
if(home_rank > adversary_rank){
return(home_team)
}
return(adversary)
}
games_context = read_csv("games_context.csv")
power_rankings = read_csv("power_rankings.csv")
power_rankings = power_rankings %>% select(Team_target = team, Season = year, Week = week, human_rank = rank, Previous_Rank, Rank_change) %>% filter(Season == 2015, Week %in% 1:17)
power_rankings$Week = power_rankings$Week %>% as.integer()
train = games_context %>% filter(Season <= 2014)
test = games_context %>% filter(Season > 2014)
test_clean_data = test %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
train_clean_data = train %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = train_clean_data, method = "lm", trControl = ctrl, metric="Rsquared")
residuals = resid(lmCVFit)
predictedValues = predict(lmCVFit)
expected_winner_model = test %>% rowwise() %>% do(expected_winner = get_winner_based_on_power_rank(test_machine_based, .$Team_target, .$Team_adversary, .$Season, .$Week ))
library(caret)
library(tidyverse)
insert_at_position = function(vector, bye_teams_rank){
n = nrow(bye_teams_rank)
elements_to_insert = bye_teams_rank$Team_target
position_to_insert = bye_teams_rank$rank
for(pos in 1:n){
vector = vector %>% append(elements_to_insert[pos],(position_to_insert[pos]-1))
}
return(vector)
}
get_week_rank <- function(test_machine_based, week_games, prediction_s_w, week){
all_teams = test_machine_based$Team_target %>% unique()
bye_teams = setdiff(all_teams, week_games$Team_target)
bye_teams_rank = test_machine_based %>% filter(Week == (week-1), Team_target %in% bye_teams) %>% select(Team_target, rank)
partial_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(partial_rank = (prediction_s_w + week_games$Previous_Rank) %>% rank()) %>% arrange(partial_rank)
final_rank_position = partial_rank$Team_target
if(length(final_rank_position)!= 32){ #32 total of teams
final_rank_position = insert_at_position(partial_rank$Team_target, bye_teams_rank)
}
final_rank = data_frame(Season = partial_rank$Season %>% unique(), Week = partial_rank$Week %>% unique(), Team_target = final_rank_position, rank = 1:32)
return(final_rank)
}
update_data_frame = function(full_data, replacement_data, update_next_week){
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
# update rank_change
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w = full_data_s_w %>% right_join(replacement_data) %>% mutate(Previous_Rank = if_else(is.na(Previous_Rank),rank,Previous_Rank), Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(Season == season, Week != week)
full_data = full_data %>% bind_rows(full_data_s_w)
# update previous_rank of next week
if(((week+1) <= max(full_data$Week)) & update_next_week){
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
full_data_s_next_w = full_data_s_next_w %>% right_join(replacement_data %>% select(Previous_Rank = rank, -Week, Season, Team_target))
full_data = full_data %>% filter(Season == season, Week != (week+1))
full_data = full_data %>% bind_rows(full_data_s_next_w)
}
return(full_data)
}
get_full_rank = function(test, update_next_week = T){
test_rank = test
max_season = max(test_rank$Season)
min_season = min(test_rank$Season)
max_week = max(test_rank$Week)
min_week = min(test_rank$Week)
for(s in min_season:max_season){
for(w in min_week:max_week){
week_games = test_rank %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = get_week_rank(test_rank, week_games, prediction_s_w, w)
test_rank = update_data_frame(test_rank, new_rank, update_next_week = T)
}
}
test_rank = test_rank %>% select(Season, Week, Team_target, rank, Previous_Rank, Rank_change)
}
get_winner_based_on_power_rank = function(power_ranking, home_team, adversary, season, week){
pw = power_ranking %>% filter(Week == week, Season == season)
home_rank = pw %>% filter(Team_target == home_team) %>% select(Previous_Rank) %>% as.integer()
adversary_rank = pw %>% filter(Team_target == adversary) %>% select(Previous_Rank) %>% as.integer()
if(home_rank > adversary_rank){
return(home_team)
}
return(adversary)
}
games_context = read_csv("games_context.csv")
power_rankings = read_csv("power_rankings.csv")
power_rankings = power_rankings %>% select(Team_target = team, Season = year, Week = week, human_rank = rank, Previous_Rank, Rank_change) %>% filter(Season == 2015, Week %in% 1:17)
power_rankings$Week = power_rankings$Week %>% as.integer()
train = games_context %>% filter(Season <= 2014)
test = games_context %>% filter(Season > 2014)
test_clean_data = test %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
train_clean_data = train %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = train_clean_data, method = "lm", trControl = ctrl, metric="Rsquared")
residuals = resid(lmCVFit)
predictedValues = predict(lmCVFit)
test_clean_data = test %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary, -Game_winner)
train_clean_data = train %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary, -Game_winner)
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = train_clean_data, method = "lm", trControl = ctrl, metric="Rsquared")
residuals = resid(lmCVFit)
predictedValues = predict(lmCVFit)
predictedVal = predict(lmCVFit, test_clean_data)
modelvalues = data.frame(obs = test_clean_data$Rank_change, pred=predictedVal)
plot(train_clean_data$Rank_change, residuals)
plot(varImp(lmCVFit))
defaultSummary(modelvalues)
saveRDS(lmCVFit, "power_ranking_variations.rds")
test_human_based = get_full_rank(test, update_next_week = F)
model_rank = test_human_based %>% select(Season, Week, Team_target, model_rank = rank)
ranks = power_rankings %>% inner_join(model_rank) %>% arrange(Season, Week, model_rank)
corr_1 = ranks %>% group_by(Season, Week) %>% summarise(Correlation = cor.test(human_rank, model_rank, method = "spearman", alternative = "two.sided")$estimate)
test_machine_based = get_full_rank(test)
model_rank = test_machine_based %>% select(Season, Week, Team_target, model_rank = rank)
ranks = power_rankings %>% inner_join(model_rank) %>% arrange(Season, Week, model_rank)
corr_2 = ranks %>% group_by(Season, Week) %>% summarise(Correlation = cor.test(human_rank, model_rank, method = "spearman", alternative = "two.sided")$estimate)
expected_winner_model = test %>% rowwise() %>% do(expected_winner = get_winner_based_on_power_rank(test_machine_based, .$Team_target, .$Team_adversary, .$Season, .$Week ))
expected_winner_model$expected_winner %>% unlist() == test$Game_winner
table(expected_winner_model$expected_winner %>% unlist() == test$Game_winner)
expected_winner_human = test %>% rowwise() %>% do(expected_winner = get_winner_based_on_power_rank(power_rankings, .$Team_target, .$Team_adversary, .$Season, .$Week ))
table(expected_winner_human$expected_winner %>% unlist() == test$Game_winner)
expected_winner_human
expected_winner_model = test %>% rowwise() %>% do(expected_winner = get_winner_based_on_power_rank(test_machine_based, .$Team_target, .$Team_adversary, .$Season, .$Week ))
expected_winner_model = test %>% rowwise() %>% do(expected_winner = get_winner_based_on_power_rank(test_machine_based, .$Team_target, .$Team_adversary, .$Season, .$Week ))
expected_winner_human = test %>% rowwise() %>% do(expected_winner = get_winner_based_on_power_rank(power_rankings, .$Team_target, .$Team_adversary, .$Season, .$Week ))
test = test %>% mutate(model_expected_winner = expected_winner_model$expected_winner %>% unlist(), human_expected_winner = expected_winner_human$expected_winner %>% unlist())
test %>% filter(Game_winner == model_expected_winner) %>% group_by(Season, Week) %>% summarise(Correct = n())
test %>% filter(Game_winner == human_expected_winner) %>% group_by(Season, Week) %>% summarise(Correct = n())
a = test %>% filter(Game_winner == model_expected_winner) %>% group_by(Season, Week) %>% summarise(Correct = n())
b = test %>% filter(Game_winner == human_expected_winner) %>% group_by(Season, Week) %>% summarise(Correct = n())
a$Correct
a$Correct %>% sum()
16*17
View(test)
512/2
a = test %>% filter(Game_winner == model_expected_winner) %>% group_by(Season, Week) %>% summarise(Correct = n()/2)
a
b
b = test %>% filter(Game_winner == human_expected_winner) %>% group_by(Season, Week) %>% summarise(Correct = n()/2)
b
a
b
models_correct = test %>% filter(Game_winner == model_expected_winner) %>% group_by(Season, Week) %>% summarise(Correct = n()/2)
humans_correct = test %>% filter(Game_winner == human_expected_winner) %>% group_by(Season, Week) %>% summarise(Correct = n()/2)
games_per_week = test %>% group_by(Season, Week) %>% summarise(n_games = n()/2)
games_per_week
models_correct = test %>% filter(Game_winner == model_expected_winner) %>% group_by(Season, Week) %>% summarise(model_correct = n()/2)
humans_correct = test %>% filter(Game_winner == human_expected_winner) %>% group_by(Season, Week) %>% summarise(human_correct = n()/2)
j <- ggplot(economics, aes(date, unemploy)) + geom_line()
j
games_per_week = test %>% group_by(Season, Week) %>% summarise(n_games = n()/2)
inner_join(models_correct, humans_correct, games_per_week)
games_per_week
humans_correct
inner_join(models_correct, humans_correct)
n_games_correct = models_correct %>% inner_join(humans_correct) %>% inner_join(games_per_week)
n_games_correct
j <- ggplot(economics) + geom_line(aes(date, unemploy))
j
j <- economics %>% ggplot() + geom_line(aes(date, unemploy))
j
n_games_correct = models_correct %>% inner_join(humans_correct) %>% inner_join(games_per_week)
models_correct = test %>% filter(Game_winner == model_expected_winner) %>% group_by(Season, Week) %>% summarise(model_correct = n()/2)
humans_correct = test %>% filter(Game_winner == human_expected_winner) %>% group_by(Season, Week) %>% summarise(human_correct = n()/2)
games_per_week = test %>% group_by(Season, Week) %>% summarise(n_games = n()/2)
n_games_correct = models_correct %>% inner_join(humans_correct) %>% inner_join(games_per_week)
j <- economics %>% ggplot() + geom_line(aes(date, unemploy))
j
n_games_correct
# j <- economics %>% ggplot() + geom_line(aes(date, unemploy))
# j
n_games_correct %>% ggplot() + geom_line(aes(Week, models_correct))
n_games_correct
# j <- economics %>% ggplot() + geom_line(aes(date, unemploy))
# j
n_games_correct %>% ggplot() + geom_line(aes(Week, model_correct))
# j <- economics %>% ggplot() + geom_line(aes(date, unemploy))
# j
n_games_correct %>% ggplot() + geom_line(aes(Week, model_correct)) + geom_line(aes(Week, humans_correct))
# j <- economics %>% ggplot() + geom_line(aes(date, unemploy))
# j
n_games_correct %>% ggplot() + geom_line(aes(Week, model_correct)) + geom_line(aes(Week, human_correct))
# j <- economics %>% ggplot() + geom_line(aes(date, unemploy))
# j
n_games_correct %>% ggplot() + geom_line(aes(Week, n_games)) + geom_line(aes(Week, human_correct))
# j <- economics %>% ggplot() + geom_line(aes(date, unemploy))
# j
n_games_correct %>% ggplot() + geom_line(aes(Week, n_games)) + geom_line(aes(Week, human_correct)) + geom_line(aes(Week, model_correct))
# j <- economics %>% ggplot() + geom_line(aes(date, unemploy))
# j
n_games_correct %>% ggplot() + geom_line(aes(Week, n_games, color = "red")) + geom_line(aes(Week, human_correct)) + geom_line(aes(Week, model_correct))
# j <- economics %>% ggplot() + geom_line(aes(date, unemploy))
# j
n_games_correct %>% ggplot() + geom_line(aes(Week, n_games, color = "n games")) + geom_line(aes(Week, human_correct)) + geom_line(aes(Week, model_correct))
# j <- economics %>% ggplot() + geom_line(aes(date, unemploy))
# j
n_games_correct %>% ggplot() + geom_line(aes(Week, n_games, color = "N° games")) + geom_line(aes(Week, human_correct)) + geom_line(aes(Week, model_correct))
# j <- economics %>% ggplot() + geom_line(aes(date, unemploy))
# j
n_games_correct %>% ggplot() + geom_line(aes(Week, n_games, color = "N° games")) + geom_line(aes(Week, human_correct, color = "Human correct")) + geom_line(aes(Week, model_correct, color = "Model correct"))
# j <- economics %>% ggplot() + geom_line(aes(date, unemploy))
# j
n_games_correct %>% ggplot() + geom_line(aes(Week, n_games, color = "Total games")) + geom_line(aes(Week, human_correct, color = "Human correct")) + geom_line(aes(Week, model_correct, color = "Model correct"))
library(caret)
library(tidyverse)
insert_at_position = function(vector, bye_teams_rank){
n = nrow(bye_teams_rank)
elements_to_insert = bye_teams_rank$Team_target
position_to_insert = bye_teams_rank$rank
for(pos in 1:n){
vector = vector %>% append(elements_to_insert[pos],(position_to_insert[pos]-1))
}
return(vector)
}
get_week_rank <- function(test_machine_based, week_games, prediction_s_w, week){
all_teams = test_machine_based$Team_target %>% unique()
bye_teams = setdiff(all_teams, week_games$Team_target)
bye_teams_rank = test_machine_based %>% filter(Week == (week-1), Team_target %in% bye_teams) %>% select(Team_target, rank)
partial_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(partial_rank = (prediction_s_w + week_games$Previous_Rank) %>% rank()) %>% arrange(partial_rank)
final_rank_position = partial_rank$Team_target
if(length(final_rank_position)!= 32){ #32 total of teams
final_rank_position = insert_at_position(partial_rank$Team_target, bye_teams_rank)
}
final_rank = data_frame(Season = partial_rank$Season %>% unique(), Week = partial_rank$Week %>% unique(), Team_target = final_rank_position, rank = 1:32)
return(final_rank)
}
update_data_frame = function(full_data, replacement_data, update_next_week){
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
# update rank_change
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w = full_data_s_w %>% right_join(replacement_data) %>% mutate(Previous_Rank = if_else(is.na(Previous_Rank),rank,Previous_Rank), Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(Season == season, Week != week)
full_data = full_data %>% bind_rows(full_data_s_w)
# update previous_rank of next week
if(((week+1) <= max(full_data$Week)) & update_next_week){
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
full_data_s_next_w = full_data_s_next_w %>% right_join(replacement_data %>% select(Previous_Rank = rank, -Week, Season, Team_target))
full_data = full_data %>% filter(Season == season, Week != (week+1))
full_data = full_data %>% bind_rows(full_data_s_next_w)
}
return(full_data)
}
get_full_rank = function(test, update_next_week = T){
test_rank = test
max_season = max(test_rank$Season)
min_season = min(test_rank$Season)
max_week = max(test_rank$Week)
min_week = min(test_rank$Week)
for(s in min_season:max_season){
for(w in min_week:max_week){
week_games = test_rank %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = get_week_rank(test_rank, week_games, prediction_s_w, w)
test_rank = update_data_frame(test_rank, new_rank, update_next_week = T)
}
}
test_rank = test_rank %>% select(Season, Week, Team_target, rank, Previous_Rank, Rank_change)
}
get_winner_based_on_power_rank = function(power_ranking, home_team, adversary, season, week){
pw = power_ranking %>% filter(Week == week, Season == season)
home_rank = pw %>% filter(Team_target == home_team) %>% select(Previous_Rank) %>% as.integer()
adversary_rank = pw %>% filter(Team_target == adversary) %>% select(Previous_Rank) %>% as.integer()
if(home_rank > adversary_rank){
return(home_team)
}
return(adversary)
}
games_context = read_csv("games_context.csv")
power_rankings = read_csv("power_rankings.csv")
power_rankings = power_rankings %>% select(Team_target = team, Season = year, Week = week, human_rank = rank, Previous_Rank, Rank_change) %>% filter(Season == 2015, Week %in% 1:17)
power_rankings$Week = power_rankings$Week %>% as.integer()
train = games_context %>% filter(Season <= 2014)
test = games_context %>% filter(Season > 2014)
test_clean_data = test %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary, -Game_winner)
train_clean_data = train %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary, -Game_winner)
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = train_clean_data, method = "lm", trControl = ctrl, metric="Rsquared")
residuals = resid(lmCVFit)
predictedValues = predict(lmCVFit)
predictedVal = predict(lmCVFit, test_clean_data)
modelvalues = data.frame(obs = test_clean_data$Rank_change, pred=predictedVal)
plot(train_clean_data$Rank_change, residuals)
plot(varImp(lmCVFit))
defaultSummary(modelvalues)
saveRDS(lmCVFit, "power_ranking_variations.rds")
test_human_based = get_full_rank(test, update_next_week = F)
model_rank = test_human_based %>% select(Season, Week, Team_target, model_rank = rank)
ranks = power_rankings %>% inner_join(model_rank) %>% arrange(Season, Week, model_rank)
corr_1 = ranks %>% group_by(Season, Week) %>% summarise(Correlation = cor.test(human_rank, model_rank, method = "spearman", alternative = "two.sided")$estimate)
test_machine_based = get_full_rank(test)
model_rank = test_machine_based %>% select(Season, Week, Team_target, model_rank = rank)
ranks = power_rankings %>% inner_join(model_rank) %>% arrange(Season, Week, model_rank)
corr_2 = ranks %>% group_by(Season, Week) %>% summarise(Correlation = cor.test(human_rank, model_rank, method = "spearman", alternative = "two.sided")$estimate)
expected_winner_model = test %>% rowwise() %>% do(expected_winner = get_winner_based_on_power_rank(test_machine_based, .$Team_target, .$Team_adversary, .$Season, .$Week ))
expected_winner_human = test %>% rowwise() %>% do(expected_winner = get_winner_based_on_power_rank(power_rankings, .$Team_target, .$Team_adversary, .$Season, .$Week ))
test = test %>% mutate(model_expected_winner = expected_winner_model$expected_winner %>% unlist(), human_expected_winner = expected_winner_human$expected_winner %>% unlist())
models_correct = test %>% filter(Game_winner == model_expected_winner) %>% group_by(Season, Week) %>% summarise(model_correct = n()/2)
humans_correct = test %>% filter(Game_winner == human_expected_winner) %>% group_by(Season, Week) %>% summarise(human_correct = n()/2)
games_per_week = test %>% group_by(Season, Week) %>% summarise(n_games = n()/2)
n_games_correct = models_correct %>% inner_join(humans_correct) %>% inner_join(games_per_week)
n_games_correct %>% ggplot() + geom_line(aes(Week, n_games, color = "Total games")) + geom_line(aes(Week, human_correct, color = "Human correct")) + geom_line(aes(Week, model_correct, color = "Model correct"))
