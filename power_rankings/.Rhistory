} else {
previous_rank = data_consult %>% filter(week == (week_number-1), team == team_name, year == season_year) %>% select(rank)
}
return(previous_rank)
}
power_rankings_ = power_rankings %>% rowwise() %>% do(Previous_Rank = get_previous_rank(., .$week, .$team, .$year, power_rankings))
#get_previous_rank(data, week, team, year)
power_rankings_
View(power_rankings_)
#data = power_rankings
#week = 1
#team = "New York Giants"
#year = 2011
get_previous_rank <- function(data, week_number, team_name, season_year, data_consult){
if(week_number == 0){
previous_rank = 0
} else {
previous_rank = data_consult %>% filter(week == (week_number-1), team == team_name, year == season_year) %>% select(rank) %>% as.integer()
}
return(previous_rank)
}
power_rankings_ = power_rankings %>% rowwise() %>% do(Previous_Rank = get_previous_rank(., .$week, .$team, .$year, power_rankings))
#get_previous_rank(data, week, team, year)
View(power_rankings_)
power_rankings_ = power_rankings %>% rowwise() %>% mutate(Previous_Rank = get_previous_rank(week, team, year, power_rankings))
power_rankings_ = power_rankings %>% mutate(Previous_Rank = get_previous_rank(week, team, year, power_rankings))
power_rankings_ = power_rankings %>% mutate(Previous_Rank = get_previous_rank(week, team, year))
get_previous_rank <- function(data, week_number, team_name, season_year){
if(week_number == 0){
previous_rank = 0
} else {
previous_rank = data_consult %>% filter(week == (week_number-1), team == team_name, year == season_year) %>% select(rank) %>% as.integer()
}
return(previous_rank)
}
get_previous_rank <- function(data, week_number, team_name, season_year){
if(week_number == 0){
previous_rank = 0
} else {
previous_rank = data %>% filter(week == (week_number-1), team == team_name, year == season_year) %>% select(rank) %>% as.integer()
}
return(previous_rank)
}
power_rankings_ = power_rankings %>% mutate(Previous_Rank = get_previous_rank(week, team, year))
get_previous_rank <- function(data, week_number, team_name, season_year, data_consult){
if(week_number == 0){
previous_rank = 0
} else {
previous_rank = data_consult %>% filter(week == (week_number-1), team == team_name, year == season_year) %>% select(rank) %>% as.integer()
}
return(previous_rank)
}
power_rankings_ = power_rankings %>% rowwise() %>% do(Previous_Rank = get_previous_rank(., .$week, .$team, .$year, power_rankings))
View(power_rankings)
previous = power_rankings %>% group_by(team, year) %>% rowwise() %>% do(Previous_Rank = get_previous_rank(., .$week, .$team, .$year, power_rankings))
get_previous_rank <- function(data, week_number, team_name, season_year, data_consult){
if(week_number == 0){
previous_rank = data_frame(0, team_name, year)
} else {
previous_rank = data_consult %>% filter(week == (week_number-1), team == team_name, year == season_year) %>% select(rank, team, year) %>% as.integer()
}
return(previous_rank)
}
previous = power_rankings %>% rowwise() %>% do(Previous_Rank = get_previous_rank(., .$week, .$team, .$year, power_rankings))
#data = power_rankings
#week = 1
#team = "New York Giants"
#year = 2011
get_previous_rank <- function(data, week_number, team_name, season_year, data_consult){
if(week_number == 0){
previous_rank = 0
} else {
previous_rank = data_consult %>% filter(week == (week_number-1), team == team_name, year == season_year) %>% select(rank) %>% as.integer()
}
return(previous_rank)
}
previous = power_rankings %>% group_by(team, year) %>% rowwise() %>% do(Previous_Rank = get_previous_rank(., .$week, .$team, .$year, power_rankings))
#get_previous_rank(data, week, team, year)
library(tidyverse)
library(votesys)
game_results = read_csv("nfl_game_results.csv")
game_results = game_results %>% select(Date, `Home Team`, `Away Team`, `Home Score`, `Away Score`)
get_season = function(date){
month = format(date, "%m") %>% as.integer()
year = format(date, "%Y") %>% as.integer()
if(month < 3){
return(year - 1)
}
return(year)
}
game_results = game_results %>% rowwise %>% mutate(Season = get_season(Date))
get_week = function(dates){
DAY_BEFORE = 1
dif_of_weeks = difftime(dates, min(dates)-DAY_BEFORE, units = "weeks") %>% as.integer()
week = dif_of_weeks + 1
week
}
game_results = game_results %>% group_by(Season) %>% mutate(Week = get_week(Date))
game_results$Day_of_week = weekdays(game_results$Date)
game_results$Type = with(game_results, if_else(Week <= 17, "Regular Season",
if_else(Week == 18, "Wild Card",
if_else(Week == 19, "Divisional",
if_else(Week == 20, "Conference",
"Super Bowl")))))
power_rankings = read_csv("python_crawlers/crawlers/spiders/nfl.csv")
preseason_rankings =  power_rankings %>% filter(week == 0)
power_rankings = power_rankings %>% filter(week %in% 0:17)
power_rankings$week = power_rankings$week %>% as.integer()
#data = power_rankings
#week = 1
#team = "New York Giants"
#year = 2011
get_previous_rank <- function(data, week_number, team_name, season_year, data_consult){
if(week_number == 0){
previous_rank = 0
} else {
previous_rank = data_consult %>% filter(week == (week_number-1), team == team_name, year == season_year) %>% select(rank) %>% as.integer()
}
return(previous_rank)
}
previous = power_rankings %>% group_by(team, year) %>% rowwise() %>% do(Previous_Rank = get_previous_rank(., .$week, .$team, .$year, power_rankings))
#get_previous_rank(data, week, team, year)
power_rankings = power_rankings %>% bind_cols(previous)
View(power_rankings)
View(previous)
View(power_rankings)
power_rankings = power_rankings %>% bind_cols(previous) %>% mutate(Rank_change = rank - Previous_Rank)
str(power_rankings)
str(previous)
previous$Previous_Rank
previous$Previous_Rank %>% unlist()
power_rankings = power_rankings %>% bind_cols(Previous_Rank = previous$Previous_Rank %>% unlist()) #%>% mutate(Rank_change = rank - Previous_Rank)
library(tidyverse)
library(votesys)
game_results = read_csv("nfl_game_results.csv")
game_results = game_results %>% select(Date, `Home Team`, `Away Team`, `Home Score`, `Away Score`)
get_season = function(date){
month = format(date, "%m") %>% as.integer()
year = format(date, "%Y") %>% as.integer()
if(month < 3){
return(year - 1)
}
return(year)
}
game_results = game_results %>% rowwise %>% mutate(Season = get_season(Date))
get_week = function(dates){
DAY_BEFORE = 1
dif_of_weeks = difftime(dates, min(dates)-DAY_BEFORE, units = "weeks") %>% as.integer()
week = dif_of_weeks + 1
week
}
game_results = game_results %>% group_by(Season) %>% mutate(Week = get_week(Date))
game_results$Day_of_week = weekdays(game_results$Date)
game_results$Type = with(game_results, if_else(Week <= 17, "Regular Season",
if_else(Week == 18, "Wild Card",
if_else(Week == 19, "Divisional",
if_else(Week == 20, "Conference",
"Super Bowl")))))
power_rankings = read_csv("python_crawlers/crawlers/spiders/nfl.csv")
preseason_rankings =  power_rankings %>% filter(week == 0)
power_rankings = power_rankings %>% filter(week %in% 0:17)
power_rankings$week = power_rankings$week %>% as.integer()
#data = power_rankings
#week = 1
#team = "New York Giants"
#year = 2011
get_previous_rank <- function(data, week_number, team_name, season_year, data_consult){
if(week_number == 0){
previous_rank = 0
} else {
previous_rank = data_consult %>% filter(week == (week_number-1), team == team_name, year == season_year) %>% select(rank) %>% as.integer()
}
return(previous_rank)
}
previous = power_rankings %>% group_by(team, year) %>% rowwise() %>% do(Previous_Rank = get_previous_rank(., .$week, .$team, .$year, power_rankings))
power_rankings = power_rankings %>% bind_cols(Previous_Rank = previous$Previous_Rank %>% unlist()) #%>% mutate(Rank_change = rank - Previous_Rank)
#get_previous_rank(data, week, team, year)
str(power_rankings)
View(preseason_rankings)
View(power_rankings)
power_rankings %>% mutate(Rank_change = rank - Previous_Rank)
library(tidyverse)
library(votesys)
game_results = read_csv("nfl_game_results.csv")
game_results = game_results %>% select(Date, `Home Team`, `Away Team`, `Home Score`, `Away Score`)
get_season = function(date){
month = format(date, "%m") %>% as.integer()
year = format(date, "%Y") %>% as.integer()
if(month < 3){
return(year - 1)
}
return(year)
}
game_results = game_results %>% rowwise %>% mutate(Season = get_season(Date))
get_week = function(dates){
DAY_BEFORE = 1
dif_of_weeks = difftime(dates, min(dates)-DAY_BEFORE, units = "weeks") %>% as.integer()
week = dif_of_weeks + 1
week
}
game_results = game_results %>% group_by(Season) %>% mutate(Week = get_week(Date))
game_results$Day_of_week = weekdays(game_results$Date)
game_results$Type = with(game_results, if_else(Week <= 17, "Regular Season",
if_else(Week == 18, "Wild Card",
if_else(Week == 19, "Divisional",
if_else(Week == 20, "Conference",
"Super Bowl")))))
power_rankings = read_csv("python_crawlers/crawlers/spiders/nfl.csv")
preseason_rankings =  power_rankings %>% filter(week == 0)
power_rankings = power_rankings %>% filter(week %in% 0:17)
power_rankings$week = power_rankings$week %>% as.integer()
#data = power_rankings
#week = 1
#team = "New York Giants"
#year = 2011
get_previous_rank <- function(data, week_number, team_name, season_year, data_consult){
if(week_number == 0){
previous_rank = 0
} else {
previous_rank = data_consult %>% filter(week == (week_number-1), team == team_name, year == season_year) %>% select(rank) %>% as.integer()
}
return(previous_rank)
}
previous = power_rankings %>% group_by(team, year) %>% rowwise() %>% do(Previous_Rank = get_previous_rank(., .$week, .$team, .$year, power_rankings))
power_rankings = power_rankings %>% bind_cols(Previous_Rank = previous$Previous_Rank %>% unlist()) %>% mutate(Rank_change = rank - Previous_Rank)
str(power_rankings)
#get_previous_rank(data, week, team, year)
View(power_rankings)
teams_results = game_results %>% select(Date, Team_target =`Home Team`, Team_adversary = `Away Team`, Team_target_score =`Home Score`, Team_adversary_score =`Away Score`, Season, Week, Day_of_week, Type)
teams_results_2 = game_results %>% select(Date, Team_target = `Away Team`, Team_adversary =`Home Team`, Team_target_score =`Away Score`, Team_adversary_score =`Home Score`, Season, Week, Day_of_week, Type)
teams_results = rbind(teams_results, teams_results_2)
games_context = teams_results %>% inner_join(power_rankings, by = c("Team_target" = "team", "Season" = "year", "Week" = "week"))
games_context = games_context %>% inner_join(power_rankings %>% rename_at(vars(record, n_wins, n_loses, n_ties, rank),function(x) paste0(x,"_adversary")), by = c("Team_adversary" = "team", "Season" = "year", "Week" = "week"))
View(games_context)
View(power_rankings)
games_context = teams_results %>% inner_join(power_rankings, by = c("Team_target" = "team", "Season" = "year", "Week" = "week"))
games_context = games_context %>% inner_join(power_rankings %>% rename_at(vars(-team, -year, -week),function(x) paste0(x,"_adversary")), by = c("Team_adversary" = "team", "Season" = "year", "Week" = "week"))
#record, n_wins, n_loses, n_ties, rank
games_context = teams_results %>% inner_join(power_rankings, by = c("Team_target" = "team", "Season" = "year", "Week" = "week"))
games_context = games_context %>% inner_join(power_rankings %>% rename_at(vars(-team, -year, -week),function(x) paste0(x,"_adversary")), by = c("Team_adversary" = "team", "Season" = "year", "Week" = "week"))
#record, n_wins, n_loses, n_ties, rank
games_context = teams_results %>% inner_join(power_rankings, by = c("Team_target" = "team", "Season" = "year", "Week" = "week"))
games_context = games_context %>% inner_join(power_rankings %>% rename_at(vars(-team, -year, -week),function(x) paste0(x,"_adversary")), by = c("Team_adversary" = "team", "Season" = "year", "Week" = "week"))
#record, n_wins, n_loses, n_ties, rank
View(games_context)
View(games_context)
View(games_context)
games_context = games_context %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary)
View(games_context)
games_context = games_context %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary)
games_context = teams_results %>% inner_join(power_rankings, by = c("Team_target" = "team", "Season" = "year", "Week" = "week"))
games_context = games_context %>% inner_join(power_rankings %>% rename_at(vars(-team, -year, -week),function(x) paste0(x,"_adversary")), by = c("Team_adversary" = "team", "Season" = "year", "Week" = "week"))
games_context = games_context %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary)
games_context = teams_results %>% inner_join(power_rankings, by = c("Team_target" = "team", "Season" = "year", "Week" = "week"))
games_context = games_context %>% inner_join(power_rankings %>% rename_at(vars(-team, -year, -week),function(x) paste0(x,"_adversary")), by = c("Team_adversary" = "team", "Season" = "year", "Week" = "week"))
games_context = games_context %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary)
View(games_context)
fit <- lm(Rank_change ~ ., data=games_context)
summary(fit)
games_context = games_context %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
games_context = teams_results %>% inner_join(power_rankings, by = c("Team_target" = "team", "Season" = "year", "Week" = "week"))
games_context = games_context %>% inner_join(power_rankings %>% rename_at(vars(-team, -year, -week),function(x) paste0(x,"_adversary")), by = c("Team_adversary" = "team", "Season" = "year", "Week" = "week"))
games_context = games_context %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
fit <- lm(Rank_change ~ ., data=games_context)
summary(fit)
fit
summary(fit)
View(games_context)
library(tidyverse)
#fit <- lm(Rank_change ~ ., data=games_context)
#summary(fit)
library(caret)
ctrl = trainControl(method = "cv", number = 10)
lmCVFit <- train(Rank_change ~ ., data = games_context, method = "lm", trControl = ctrl, metric="Rsquared")
summary(lmCVFit)
split = createDataPartition(y = games_context, p = 0.7, list = FALSE)
split = createDataPartition(y = games_context$Rank_change, p = 0.7, list = FALSE)
split
dev = games_context[split,]
val = games_context[-split,]
View(dev)
ctrl = trainControl(method = "cv", number = 10)
lmCVFit <- train(Rank_change ~ ., data = dev, method = "lm", trControl = ctrl, metric="Rsquared")
summary(lmCVFit)
residuals = resid(lmFit)
lmFit = train(Rank_change ~ ., data = dev, method = "lm", trControl = ctrl, metric="Rsquared")
summary(lmFit)
residuals = resid(lmFit)
predictedValues = predict(lmFit)
predictedValues
plot(dev$Rank_change, residuals)
abline(0,0)
plot(dev$Rank_change, residuals)
plot(dev$Rank_change,predictedValues)
residuals
lmCVFit = train(Rank_change ~ ., data = dev, method = "lm", trControl = ctrl, metric="Rsquared")
summary(lmCVFit)
lmCVFit = train(Rank_change ~ ., data = games_context, method = "lm", trControl = ctrl, metric="Rsquared")
summary(lmCVFit)
split = createDataPartition(y = games_context$Rank_change, p = 0.7, list = FALSE)
dev = games_context[split,]
val = games_context[-split,]
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = dev, method = "lm", trControl = ctrl, metric="Rsquared")
summary(lmCVFit)
split = createDataPartition(y = games_context$Rank_change, p = 0.7, list = FALSE)
dev = games_context[split,]
val = games_context[-split,]
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = dev, method = "lm", trControl = ctrl, metric="Rsquared")
lmCVFit = train(Rank_change ~ ., data = dev, method = "lm", trControl = ctrl, metric="Rsquared")
summary(lmCVFit)
residuals = resid(lmCVFit)
residuals
plot(dev$Rank_change, residuals)
predictedValues = predict(lmCVFit)
predictedValues
varImp(lmCVFit)
plot(varImp(lmCVFit))
predictedVal = predict(lmCVFit, val)
predictedVal
modelvalues = data.frame(obs = dev$Rank_change, pred=predictedVal)
predictedVal
modelvalues = data.frame(obs = val$Rank_change, pred=predictedVal)
View(modelvalues)
defaultSummary(modelvalues)
plot(varImp(lmCVFit))
library(tidyverse)
library(caret)
plot(dev$Rank_change, residuals)
plot(varImp(lmCVFit))
defaultSummary(modelvalues)
library(tidyverse)
library(caret)
game_results = read_csv("nfl_game_results.csv")
game_results = game_results %>% select(Date, `Home Team`, `Away Team`, `Home Score`, `Away Score`)
get_season = function(date){
month = format(date, "%m") %>% as.integer()
year = format(date, "%Y") %>% as.integer()
if(month < 3){
return(year - 1)
}
return(year)
}
game_results = game_results %>% rowwise %>% mutate(Season = get_season(Date))
get_week = function(dates){
DAY_BEFORE = 1
dif_of_weeks = difftime(dates, min(dates)-DAY_BEFORE, units = "weeks") %>% as.integer()
week = dif_of_weeks + 1
week
}
game_results = game_results %>% group_by(Season) %>% mutate(Week = get_week(Date))
game_results$Day_of_week = weekdays(game_results$Date)
game_results$Type = with(game_results, if_else(Week <= 17, "Regular Season",
if_else(Week == 18, "Wild Card",
if_else(Week == 19, "Divisional",
if_else(Week == 20, "Conference",
"Super Bowl")))))
power_rankings = read_csv("python_crawlers/crawlers/spiders/nfl.csv")
preseason_rankings =  power_rankings %>% filter(week == 0)
power_rankings = power_rankings %>% filter(week %in% 0:17)
power_rankings$week = power_rankings$week %>% as.integer()
#data = power_rankings
#week = 1
#team = "New York Giants"
#year = 2011
get_previous_rank <- function(data, week_number, team_name, season_year, data_consult){
if(week_number == 0){
previous_rank = 0
} else {
previous_rank = data_consult %>% filter(week == (week_number-1), team == team_name, year == season_year) %>% select(rank) %>% as.integer()
}
return(previous_rank)
}
previous = power_rankings %>% group_by(team, year) %>% rowwise() %>% do(Previous_Rank = get_previous_rank(., .$week, .$team, .$year, power_rankings))
power_rankings = power_rankings %>% bind_cols(Previous_Rank = previous$Previous_Rank %>% unlist()) %>% mutate(Rank_change = rank - Previous_Rank)
teams_results = game_results %>% select(Date, Team_target =`Home Team`, Team_adversary = `Away Team`, Team_target_score =`Home Score`, Team_adversary_score =`Away Score`, Season, Week, Day_of_week, Type)
teams_results_2 = game_results %>% select(Date, Team_target = `Away Team`, Team_adversary =`Home Team`, Team_target_score =`Away Score`, Team_adversary_score =`Home Score`, Season, Week, Day_of_week, Type)
teams_results = rbind(teams_results, teams_results_2)
games_context = teams_results %>% inner_join(power_rankings, by = c("Team_target" = "team", "Season" = "year", "Week" = "week"))
games_context = games_context %>% inner_join(power_rankings %>% rename_at(vars(-team, -year, -week),function(x) paste0(x,"_adversary")), by = c("Team_adversary" = "team", "Season" = "year", "Week" = "week"))
games_context = games_context %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
split = createDataPartition(y = games_context$Rank_change, p = 0.7, list = FALSE)
dev = games_context[split,]
val = games_context[-split,]
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = dev, method = "lm", trControl = ctrl, metric="Rsquared")
residuals = resid(lmCVFit)
predictedValues = predict(lmCVFit)
predictedVal = predict(lmCVFit, val)
modelvalues = data.frame(obs = val$Rank_change, pred=predictedVal)
plot(dev$Rank_change, residuals)
plot(varImp(lmCVFit))
defaultSummary(modelvalues)
library(tidyverse)
library(caret)
game_results = read_csv("nfl_game_results.csv")
game_results = game_results %>% select(Date, `Home Team`, `Away Team`, `Home Score`, `Away Score`)
get_season = function(date){
month = format(date, "%m") %>% as.integer()
year = format(date, "%Y") %>% as.integer()
if(month < 3){
return(year - 1)
}
return(year)
}
game_results = game_results %>% rowwise %>% mutate(Season = get_season(Date))
get_week = function(dates){
DAY_BEFORE = 1
dif_of_weeks = difftime(dates, min(dates)-DAY_BEFORE, units = "weeks") %>% as.integer()
week = dif_of_weeks + 1
week
}
game_results = game_results %>% group_by(Season) %>% mutate(Week = get_week(Date))
game_results$Day_of_week = weekdays(game_results$Date)
game_results$Type = with(game_results, if_else(Week <= 17, "Regular Season",
if_else(Week == 18, "Wild Card",
if_else(Week == 19, "Divisional",
if_else(Week == 20, "Conference",
"Super Bowl")))))
power_rankings = read_csv("python_crawlers/crawlers/spiders/nfl.csv")
preseason_rankings =  power_rankings %>% filter(week == 0)
power_rankings = power_rankings %>% filter(week %in% 0:17)
power_rankings$week = power_rankings$week %>% as.integer()
get_previous_rank <- function(data, week_number, team_name, season_year, data_consult){
if(week_number == 0){
previous_rank = 0
} else {
previous_rank = data_consult %>% filter(week == (week_number-1), team == team_name, year == season_year) %>% select(rank) %>% as.integer()
}
return(previous_rank)
}
previous = power_rankings %>% group_by(team, year) %>% rowwise() %>% do(Previous_Rank = get_previous_rank(., .$week, .$team, .$year, power_rankings))
power_rankings = power_rankings %>% bind_cols(Previous_Rank = previous$Previous_Rank %>% unlist()) %>% mutate(Rank_change = rank - Previous_Rank)
teams_results = game_results %>% select(Date, Team_target =`Home Team`, Team_adversary = `Away Team`, Team_target_score =`Home Score`, Team_adversary_score =`Away Score`, Season, Week, Day_of_week, Type)
teams_results_2 = game_results %>% select(Date, Team_target = `Away Team`, Team_adversary =`Home Team`, Team_target_score =`Away Score`, Team_adversary_score =`Home Score`, Season, Week, Day_of_week, Type)
teams_results = rbind(teams_results, teams_results_2)
games_context = teams_results %>% inner_join(power_rankings, by = c("Team_target" = "team", "Season" = "year", "Week" = "week"))
games_context = games_context %>% inner_join(power_rankings %>% rename_at(vars(-team, -year, -week),function(x) paste0(x,"_adversary")), by = c("Team_adversary" = "team", "Season" = "year", "Week" = "week"))
games_context = games_context %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
split = createDataPartition(y = games_context$Rank_change, p = 0.7, list = FALSE)
dev = games_context[split,]
val = games_context[-split,]
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = dev, method = "lm", trControl = ctrl, metric="Rsquared")
residuals = resid(lmCVFit)
predictedValues = predict(lmCVFit)
predictedVal = predict(lmCVFit, val)
modelvalues = data.frame(obs = val$Rank_change, pred=predictedVal)
plot(dev$Rank_change, residuals)
plot(varImp(lmCVFit))
defaultSummary(modelvalues)
library(tidyverse)
library(caret)
game_results = read_csv("nfl_game_results.csv")
game_results = game_results %>% select(Date, `Home Team`, `Away Team`, `Home Score`, `Away Score`)
get_season = function(date){
month = format(date, "%m") %>% as.integer()
year = format(date, "%Y") %>% as.integer()
if(month < 3){
return(year - 1)
}
return(year)
}
game_results = game_results %>% rowwise %>% mutate(Season = get_season(Date))
get_week = function(dates){
DAY_BEFORE = 1
dif_of_weeks = difftime(dates, min(dates)-DAY_BEFORE, units = "weeks") %>% as.integer()
week = dif_of_weeks + 1
week
}
game_results = game_results %>% group_by(Season) %>% mutate(Week = get_week(Date))
game_results$Day_of_week = weekdays(game_results$Date)
game_results$Type = with(game_results, if_else(Week <= 17, "Regular Season",
if_else(Week == 18, "Wild Card",
if_else(Week == 19, "Divisional",
if_else(Week == 20, "Conference",
"Super Bowl")))))
power_rankings = read_csv("python_crawlers/crawlers/spiders/nfl.csv")
preseason_rankings =  power_rankings %>% filter(week == 0)
power_rankings = power_rankings %>% filter(week %in% 0:17)
power_rankings$week = power_rankings$week %>% as.integer()
get_previous_rank <- function(data, week_number, team_name, season_year, data_consult){
if(week_number == 0){
previous_rank = 0
} else {
previous_rank = data_consult %>% filter(week == (week_number-1), team == team_name, year == season_year) %>% select(rank) %>% as.integer()
}
return(previous_rank)
}
previous = power_rankings %>% group_by(team, year) %>% rowwise() %>% do(Previous_Rank = get_previous_rank(., .$week, .$team, .$year, power_rankings))
power_rankings = power_rankings %>% bind_cols(Previous_Rank = previous$Previous_Rank %>% unlist()) %>% mutate(Rank_change = rank - Previous_Rank)
teams_results = game_results %>% select(Date, Team_target =`Home Team`, Team_adversary = `Away Team`, Team_target_score =`Home Score`, Team_adversary_score =`Away Score`, Season, Week, Day_of_week, Type)
teams_results_2 = game_results %>% select(Date, Team_target = `Away Team`, Team_adversary =`Home Team`, Team_target_score =`Away Score`, Team_adversary_score =`Home Score`, Season, Week, Day_of_week, Type)
teams_results = rbind(teams_results, teams_results_2)
games_context = teams_results %>% inner_join(power_rankings, by = c("Team_target" = "team", "Season" = "year", "Week" = "week"))
games_context = games_context %>% inner_join(power_rankings %>% rename_at(vars(-team, -year, -week),function(x) paste0(x,"_adversary")), by = c("Team_adversary" = "team", "Season" = "year", "Week" = "week"))
games_context = games_context %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
split = createDataPartition(y = games_context$Rank_change, p = 0.7, list = FALSE)
dev = games_context[split,]
val = games_context[-split,]
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = dev, method = "lm", trControl = ctrl, metric="Rsquared")
residuals = resid(lmCVFit)
predictedValues = predict(lmCVFit)
predictedVal = predict(lmCVFit, val)
modelvalues = data.frame(obs = val$Rank_change, pred=predictedVal)
plot(dev$Rank_change, residuals)
plot(varImp(lmCVFit))
defaultSummary(modelvalues)
plot(varImp(lmCVFit))
defaultSummary(modelvalues)
