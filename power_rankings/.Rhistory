prediction_s_w
View(test_machine_based)
week_games_prediction = bind_cols((week_games %>% select(Season, Week)),prediction_s_w)
week_games_prediction = bind_cols((week_games %>% select(Season, Week)),Prediction = prediction_s_w)
week_games_prediction
week_games_prediction = bind_cols((week_games %>% select(Season, Week, Team_target)),Prediction = prediction_s_w)
week_games_prediction
lmCVFit
train_clean_data
View(train_clean_data)
View(train)
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = prediction_s_w + week_games$Previous_Rank
new_rank
new_rank
new_rank = prediction_s_w + week_games$Previous_Rank %>% rank()
new_rank
new_rank = prediction_s_w + week_games$Previous_Rank
new_rank
new_rank = (prediction_s_w + week_games$Previous_Rank) %>% rank()
new_rank
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
new_rank
s = 2015
w = 1
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
new_rank
new_rank = week_games %>% select(Season, Week, Team_target, Previous_Rank) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank(), Rank_change = rank - Previous_Rank)
s = 2015
w = 1
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target, Previous_Rank) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank(), Rank_change = rank - Previous_Rank)
View(week_games)
new_rank = week_games %>% select(Season, Week, Team_target, Previous_Rank) %>% bind_cols(rank = (prediction_s_w + Previous_Rank) %>% rank(), Rank_change = rank - Previous_Rank)
new_rank = week_games %>% select(Season, Week, Team_target, Previous_Rank) %>% bind_cols(rank = (prediction_s_w + Previous_Rank) %>% rank())#, Rank_change = rank - Previous_Rank)
new_rank = week_games %>% select(Season, Week, Team_target, Previous_Rank) #%>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank(), Rank_change = rank - Previous_Rank)
new_rank
new_rank = week_games %>% select(Season, Week, Team_target, Previous_Rank) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank(), Rank_change = rank - week_games$Previous_Rank)
week_games$Previous_Rank
rank
rank()
new_rank = week_games %>% select(Season, Week, Team_target, Previous_Rank) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
new_rank
View(test)
new_rank = week_games %>% select(Season, Week, Team_target, Previous_Rank) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
new_rank
new_rank = week_games %>% select(Season, Week, Team_target, Previous_Rank) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank(), Rank_change = rank - Previous_Rank)
new_rank = week_games %>% select(Season, Week, Team_target, Previous_Rank) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank(), Rank_change = rank - week_games$Previous_Rank)
new_rank = week_games %>% select(Season, Week, Team_target, Previous_Rank) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
new_rank
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
new_rank
test_machine_based["Week" == w+1 & "Season" == s,]
test_machine_based[,"Week" == w+1 & "Season" == s]
w
test_machine_based["Week" == w+1]
a= test_machine_based["Week" == w+1]
test_machine_based[test_machine_based$Week == w+1]
test_machine_based[test_machine_based$Week == w+1,]
test_machine_based[test_machine_based$Week == w+1 & test_machine_based$Season == s,]
replacement_data = new_rank
full_data
full_data = test_machine_based
replacement_data = new_rank
full_data
season = replacement_data$Season %>% unique()
season
week
week = replacement_data$Week %>% unique()
week
View(full_data)
View(replacement_data)
full_data_s_w = full_data %>% filter(Season == season, Week = week)
full_data_s_w = full_data %>% filter(Season == season, Week == week)
full_data_s_w
View(replacement_data)
View(new_rank)
View(full_data_s_w)
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
View(replacement_data)
View(replacement_data)
full_data_s_w = full_data_s_w %>% inner_join(replacement_data)
View(full_data_s_w)
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w = full_data_s_w %>% inner_join(replacement_data) %>% mutate(Rank_change = rank - Previous_Rank)
View(full_data_s_w)
replacement_data %>% select(Previous_Rank = rank)
full_data_s_next_w = full_data_s_next_w %>% inner_join(replacement_data %>% select(Previous_Rank = rank))
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
full_data_s_next_w = full_data_s_next_w %>% inner_join(replacement_data %>% select(Previous_Rank = rank))
View(replacement_data)
full_data_s_next_w = full_data_s_next_w %>% inner_join(replacement_data %>% select(Previous_Rank = rank, -Week))
a = replacement_data %>% select(Previous_Rank = rank, -Week)
View(a)
full_data = test_machine_based
replacement_data = new_rank
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w = full_data_s_w %>% inner_join(replacement_data) %>% mutate(Rank_change = rank - Previous_Rank)
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
a = replacement_data %>% select(Previous_Rank = rank, -Week)
View(replacement_data)
View(a)
a = replacement_data %>% select(Previous_Rank = rank, -Week, Season, Team_target)
View(a)
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
full_data_s_next_w = full_data_s_next_w %>% inner_join(replacement_data %>% select(Previous_Rank = rank, -Week, Season, Team_target))
View(full_data_s_next_w)
library(caret)
library(tidyverse)
games_context = read_csv("games_context.csv")
train = games_context %>% filter(Season <= 2014)
test = games_context %>% filter(Season > 2014)
test_clean_data = test %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
train_clean_data = train %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = train_clean_data, method = "lm", trControl = ctrl, metric="Rsquared")
residuals = resid(lmCVFit)
predictedValues = predict(lmCVFit)
predictedVal = predict(lmCVFit, test_clean_data)
modelvalues = data.frame(obs = test_clean_data$Rank_change, pred=predictedVal)
plot(train_clean_data$Rank_change, residuals)
plot(varImp(lmCVFit))
defaultSummary(modelvalues)
saveRDS(lmCVFit, "power_ranking_variations.rds")
prediction = predict(lmCVFit, test)
test_human_based = bind_cols(test, Prediction_change = prediction)
next_rank = test_human_based %>% group_by(Season, Week) %>% mutate(model_rank = (Previous_Rank + Prediction_change) %>% rank())
corr = next_rank %>% group_by(Season, Week) %>% summarise(Correlation = cor.test(rank, model_rank, method = "spearman", alternative = "two.sided")$estimate)
pure_ranking = data_frame(time = next_rank$Team_target, temp = next_rank$Season, semana = next_rank$Week, rank_espn = next_rank$rank, rank_modelo = next_rank$model_rank)
update_data_frame = function(full_data, replacement_data){
full_data = test_machine_based
replacement_data = new_rank
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w = full_data_s_w %>% inner_join(replacement_data) %>% mutate(Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(Season == season, Week != week)
full_data = full_data %>% bind_rows(full_data_s_w)
if((week+1) > max(full_data$Week)){
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
full_data_s_next_w = full_data_s_next_w %>% inner_join(replacement_data %>% select(Previous_Rank = rank, -Week, Season, Team_target))
full_data = full_data %>% filter(Season == season, Week != (week+1))
full_data = full_data %>% bind_rows(full_data_s_next_w)
}
return(full_data)
}
test_machine_based = test
max_season = max(test_machine_based$Season)
min_season = min(test_machine_based$Season)
max_week = max(test_machine_based$Week)
min_week = min(test_machine_based$Week)
s = 2015
w = 1
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
new_rank
test_machine_based = update_data_frame(test_machine_based, new_rank)
View(test_machine_based)
View(new_rank)
library(caret)
library(tidyverse)
games_context = read_csv("games_context.csv")
train = games_context %>% filter(Season <= 2014)
test = games_context %>% filter(Season > 2014)
test_clean_data = test %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
train_clean_data = train %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = train_clean_data, method = "lm", trControl = ctrl, metric="Rsquared")
residuals = resid(lmCVFit)
predictedValues = predict(lmCVFit)
predictedVal = predict(lmCVFit, test_clean_data)
modelvalues = data.frame(obs = test_clean_data$Rank_change, pred=predictedVal)
plot(train_clean_data$Rank_change, residuals)
plot(varImp(lmCVFit))
defaultSummary(modelvalues)
saveRDS(lmCVFit, "power_ranking_variations.rds")
prediction = predict(lmCVFit, test)
test_human_based = bind_cols(test, Prediction_change = prediction)
next_rank = test_human_based %>% group_by(Season, Week) %>% mutate(model_rank = (Previous_Rank + Prediction_change) %>% rank())
corr = next_rank %>% group_by(Season, Week) %>% summarise(Correlation = cor.test(rank, model_rank, method = "spearman", alternative = "two.sided")$estimate)
pure_ranking = data_frame(time = next_rank$Team_target, temp = next_rank$Season, semana = next_rank$Week, rank_espn = next_rank$rank, rank_modelo = next_rank$model_rank)
update_data_frame = function(full_data, replacement_data){
full_data = test_machine_based
replacement_data = new_rank
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w = full_data_s_w %>% inner_join(replacement_data) %>% mutate(Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(Season == season, Week != week)
full_data = full_data %>% bind_rows(full_data_s_w)
if((week+1) <= max(full_data$Week)){
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
full_data_s_next_w = full_data_s_next_w %>% inner_join(replacement_data %>% select(Previous_Rank = rank, -Week, Season, Team_target))
full_data = full_data %>% filter(Season == season, Week != (week+1))
full_data = full_data %>% bind_rows(full_data_s_next_w)
}
return(full_data)
}
test_machine_based = test
max_season = max(test_machine_based$Season)
min_season = min(test_machine_based$Season)
max_week = max(test_machine_based$Week)
min_week = min(test_machine_based$Week)
s = 2015
w = 1
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
View(test_machine_based)
w = 2
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
library(caret)
library(tidyverse)
games_context = read_csv("games_context.csv")
train = games_context %>% filter(Season <= 2014)
test = games_context %>% filter(Season > 2014)
test_clean_data = test %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
train_clean_data = train %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = train_clean_data, method = "lm", trControl = ctrl, metric="Rsquared")
residuals = resid(lmCVFit)
predictedValues = predict(lmCVFit)
predictedVal = predict(lmCVFit, test_clean_data)
modelvalues = data.frame(obs = test_clean_data$Rank_change, pred=predictedVal)
plot(train_clean_data$Rank_change, residuals)
plot(varImp(lmCVFit))
defaultSummary(modelvalues)
saveRDS(lmCVFit, "power_ranking_variations.rds")
prediction = predict(lmCVFit, test)
test_human_based = bind_cols(test, Prediction_change = prediction)
next_rank = test_human_based %>% group_by(Season, Week) %>% mutate(model_rank = (Previous_Rank + Prediction_change) %>% rank())
corr = next_rank %>% group_by(Season, Week) %>% summarise(Correlation = cor.test(rank, model_rank, method = "spearman", alternative = "two.sided")$estimate)
pure_ranking = data_frame(time = next_rank$Team_target, temp = next_rank$Season, semana = next_rank$Week, rank_espn = next_rank$rank, rank_modelo = next_rank$model_rank)
update_data_frame = function(full_data, replacement_data){
full_data = test_machine_based
replacement_data = new_rank
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w = full_data_s_w %>% inner_join(replacement_data) %>% mutate(Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(Season == season, Week != week)
full_data = full_data %>% bind_rows(full_data_s_w)
if((week+1) <= max(full_data$Week)){
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
full_data_s_next_w = full_data_s_next_w %>% inner_join(replacement_data %>% select(Previous_Rank = rank, -Week, Season, Team_target))
full_data = full_data %>% filter(Season == season, Week != (week+1))
full_data = full_data %>% bind_rows(full_data_s_next_w)
}
return(full_data)
}
# predict change
# previous rank + change = rank
# rank -> previous rank
test_machine_based = test
max_season = max(test_machine_based$Season)
min_season = min(test_machine_based$Season)
max_week = max(test_machine_based$Week)
min_week = min(test_machine_based$Week)
for(s in min_season:max_season){
for(w in min_week:max_week){
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
}
}
s=2015
w=1
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
s=2015
w=2
week_games = test_machine_based %>% filter(Season == s, Week == w)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
s=2015
w=3
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
w=4
week_games = test_machine_based %>% filter(Season == s, Week == w)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
w=5
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
w=6
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
w=7
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
w=8
week_games = test_machine_based %>% filter(Season == s, Week == w)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
update_data_frame = function(full_data, replacement_data){
full_data = test_machine_based
replacement_data = new_rank
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w = full_data_s_w %>% inner_join(replacement_data) %>% mutate(Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(Season == season, Week != week)
full_data = full_data %>% bind_rows(full_data_s_w)
if((week+1) <= max(full_data$Week)){
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
full_data_s_next_w = full_data_s_next_w %>% inner_join(replacement_data %>% select(Previous_Rank = rank, -Week, Season, Team_target))
full_data = full_data %>% filter(Season == season, Week != (week+1))
full_data = full_data %>% bind_rows(full_data_s_next_w)
}
return(full_data)
}
# predict change
# previous rank + change = rank
# rank -> previous rank
test_machine_based = test
max_season = max(test_machine_based$Season)
min_season = min(test_machine_based$Season)
max_week = max(test_machine_based$Week)
min_week = min(test_machine_based$Week)
for(s in min_season:max_season){
for(w in min_week:max_week){
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
}
}
w=
for(s in min_season:max_season){
for(w in min_week:max_week){
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
}
}
update_data_frame = function(full_data, replacement_data){
full_data = test_machine_based
replacement_data = new_rank
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w = full_data_s_w %>% inner_join(replacement_data) %>% mutate(Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(Season == season, Week != week)
full_data = full_data %>% bind_rows(full_data_s_w)
if((week+1) <= max(full_data$Week)){
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
full_data_s_next_w = full_data_s_next_w %>% inner_join(replacement_data %>% select(Previous_Rank = rank, -Week, Season, Team_target))
full_data = full_data %>% filter(Season == season, Week != (week+1))
full_data = full_data %>% bind_rows(full_data_s_next_w)
}
return(full_data)
}
# predict change
# previous rank + change = rank
# rank -> previous rank
test_machine_based = test
max_season = max(test_machine_based$Season)
min_season = min(test_machine_based$Season)
max_week = max(test_machine_based$Week)
min_week = min(test_machine_based$Week)
for(s in min_season:max_season){
for(w in min_week:max_week){
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
}
}
w
library(caret)
library(tidyverse)
games_context = read_csv("games_context.csv")
train = games_context %>% filter(Season <= 2014)
test = games_context %>% filter(Season > 2014)
test_clean_data = test %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
train_clean_data = train %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = train_clean_data, method = "lm", trControl = ctrl, metric="Rsquared")
residuals = resid(lmCVFit)
predictedValues = predict(lmCVFit)
predictedVal = predict(lmCVFit, test_clean_data)
modelvalues = data.frame(obs = test_clean_data$Rank_change, pred=predictedVal)
plot(train_clean_data$Rank_change, residuals)
plot(varImp(lmCVFit))
defaultSummary(modelvalues)
saveRDS(lmCVFit, "power_ranking_variations.rds")
prediction = predict(lmCVFit, test)
test_human_based = bind_cols(test, Prediction_change = prediction)
next_rank = test_human_based %>% group_by(Season, Week) %>% mutate(model_rank = (Previous_Rank + Prediction_change) %>% rank())
corr = next_rank %>% group_by(Season, Week) %>% summarise(Correlation = cor.test(rank, model_rank, method = "spearman", alternative = "two.sided")$estimate)
pure_ranking = data_frame(time = next_rank$Team_target, temp = next_rank$Season, semana = next_rank$Week, rank_espn = next_rank$rank, rank_modelo = next_rank$model_rank)
update_data_frame = function(full_data, replacement_data){
full_data = test_machine_based
replacement_data = new_rank
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w = full_data_s_w %>% inner_join(replacement_data) %>% mutate(Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(Season == season, Week != week)
full_data = full_data %>% bind_rows(full_data_s_w)
if((week+1) <= max(full_data$Week)){
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
full_data_s_next_w = full_data_s_next_w %>% inner_join(replacement_data %>% select(Previous_Rank = rank, -Week, Season, Team_target))
full_data = full_data %>% filter(Season == season, Week != (week+1))
full_data = full_data %>% bind_rows(full_data_s_next_w)
}
return(full_data)
}
# predict change
# previous rank + change = rank
# rank -> previous rank
test_machine_based = test
max_season = max(test_machine_based$Season)
min_season = min(test_machine_based$Season)
max_week = max(test_machine_based$Week)
min_week = min(test_machine_based$Week)
for(s in min_season:max_season){
for(w in min_week:max_week){
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
}
}
library(caret)
library(tidyverse)
games_context = read_csv("games_context.csv")
train = games_context %>% filter(Season <= 2014)
test = games_context %>% filter(Season > 2014)
test_clean_data = test %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
train_clean_data = train %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = train_clean_data, method = "lm", trControl = ctrl, metric="Rsquared")
residuals = resid(lmCVFit)
predictedValues = predict(lmCVFit)
predictedVal = predict(lmCVFit, test_clean_data)
modelvalues = data.frame(obs = test_clean_data$Rank_change, pred=predictedVal)
plot(train_clean_data$Rank_change, residuals)
plot(varImp(lmCVFit))
defaultSummary(modelvalues)
saveRDS(lmCVFit, "power_ranking_variations.rds")
prediction = predict(lmCVFit, test)
test_human_based = bind_cols(test, Prediction_change = prediction)
next_rank = test_human_based %>% group_by(Season, Week) %>% mutate(model_rank = (Previous_Rank + Prediction_change) %>% rank())
corr = next_rank %>% group_by(Season, Week) %>% summarise(Correlation = cor.test(rank, model_rank, method = "spearman", alternative = "two.sided")$estimate)
pure_ranking = data_frame(time = next_rank$Team_target, temp = next_rank$Season, semana = next_rank$Week, rank_espn = next_rank$rank, rank_modelo = next_rank$model_rank)
update_data_frame = function(full_data, replacement_data){
full_data = test_machine_based
replacement_data = new_rank
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w = full_data_s_w %>% inner_join(replacement_data) %>% mutate(Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(Season == season, Week != week)
full_data = full_data %>% bind_rows(full_data_s_w)
if((week+1) <= max(full_data$Week)){
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
full_data_s_next_w = full_data_s_next_w %>% inner_join(replacement_data %>% select(Previous_Rank = rank, -Week, Season, Team_target))
full_data = full_data %>% filter(Season == season, Week != (week+1))
full_data = full_data %>% bind_rows(full_data_s_next_w)
}
return(full_data)
}
# predict change
# previous rank + change = rank
# rank -> previous rank
test_machine_based = test
max_season = max(test_machine_based$Season)
min_season = min(test_machine_based$Season)
max_week = max(test_machine_based$Week)
min_week = min(test_machine_based$Week)
for(s in min_season:max_season){
for(w in min_week:max_week){
print(w)
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
}
}
w = 11
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
week_games = test_machine_based %>% filter(Season == s, Week == w)
View(test_machine_based)
