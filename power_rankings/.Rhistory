games_context = read_csv("games_context.csv")
train = games_context %>% filter(Season <= 2014)
test = games_context %>% filter(Season > 2014)
test_clean_data = test %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
train_clean_data = train %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = train_clean_data, method = "lm", trControl = ctrl, metric="Rsquared")
residuals = resid(lmCVFit)
predictedValues = predict(lmCVFit)
predictedVal = predict(lmCVFit, test_clean_data)
modelvalues = data.frame(obs = test_clean_data$Rank_change, pred=predictedVal)
plot(train_clean_data$Rank_change, residuals)
plot(varImp(lmCVFit))
defaultSummary(modelvalues)
saveRDS(lmCVFit, "power_ranking_variations.rds")
prediction = predict(lmCVFit, test)
test_human_based = bind_cols(test, Prediction_change = prediction)
next_rank = test_human_based %>% group_by(Season, Week) %>% mutate(model_rank = (Previous_Rank + Prediction_change) %>% rank())
corr = next_rank %>% group_by(Season, Week) %>% summarise(Correlation = cor.test(rank, model_rank, method = "spearman", alternative = "two.sided")$estimate)
pure_ranking = data_frame(time = next_rank$Team_target, temp = next_rank$Season, semana = next_rank$Week, rank_espn = next_rank$rank, rank_modelo = next_rank$model_rank)
library(caret)
library(tidyverse)
games_context = read_csv("games_context.csv")
train = games_context %>% filter(Season <= 2014)
test = games_context %>% filter(Season > 2014)
test_clean_data = test %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
train_clean_data = train %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = train_clean_data, method = "lm", trControl = ctrl, metric="Rsquared")
residuals = resid(lmCVFit)
predictedValues = predict(lmCVFit)
predictedVal = predict(lmCVFit, test_clean_data)
modelvalues = data.frame(obs = test_clean_data$Rank_change, pred=predictedVal)
plot(train_clean_data$Rank_change, residuals)
plot(varImp(lmCVFit))
defaultSummary(modelvalues)
saveRDS(lmCVFit, "power_ranking_variations.rds")
prediction = predict(lmCVFit, test)
test_human_based = bind_cols(test, Prediction_change = prediction)
next_rank = test_human_based %>% group_by(Season, Week) %>% mutate(model_rank = (Previous_Rank + Prediction_change) %>% rank())
corr = next_rank %>% group_by(Season, Week) %>% summarise(Correlation = cor.test(rank, model_rank, method = "spearman", alternative = "two.sided")$estimate)
pure_ranking = data_frame(time = next_rank$Team_target, temp = next_rank$Season, semana = next_rank$Week, rank_espn = next_rank$rank, rank_modelo = next_rank$model_rank)
update_data_frame = function(full_data, replacement_data){
full_data = test_machine_based
replacement_data = new_rank
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
# update rank_change
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w = full_data_s_w %>% left_join(replacement_data) %>% mutate(Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(Season == season, Week != week)
full_data = full_data %>% bind_rows(full_data_s_w)
# update previous_rank of next week
if((week+1) <= max(full_data$Week)){
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
full_data_s_next_w = full_data_s_next_w %>% left_join(replacement_data %>% select(Previous_Rank = rank, -Week, Season, Team_target))
full_data = full_data %>% filter(Season == season, Week != (week+1))
full_data = full_data %>% bind_rows(full_data_s_next_w)
}
# update previous_rank and rank_change after bye week
team_game_rank_before_bye = full_data %>% filter(is.na(Previous_Rank), is.na(Rank_change)) %>% mutate(Week = Week - 2) %>% select(Team_target, rank) %>% arrange(Team_target)
team_game_week_after_bye = full_data %>% filter(is.na(Previous_Rank), is.na(Rank_change)) %>% select(-Previous_Rank, Rank_change) %>% arrange(Team_target) %>% mutate(Previous_Rank = team_game_rank_before_bye$rank, Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(!is.na(Previous_Rank), !is.na(Rank_change))
full_data = full_data %>% bind_rows(team_game_week_after_bye)
return(full_data)
}
test_machine_based = test
max_season = max(test_machine_based$Season)
min_season = min(test_machine_based$Season)
max_week = max(test_machine_based$Week)
min_week = min(test_machine_based$Week)
s=2015
w=1
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
w=2
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
w=3
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
w=4
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
full_data = test_machine_based
replacement_data = new_rank
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
# update rank_change
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w = full_data_s_w %>% right_join(replacement_data) %>% mutate(Rank_change = rank - Previous_Rank)
# update previous_rank of next week
if((week+1) <= max(full_data$Week)){
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
full_data_s_next_w = full_data_s_next_w %>% right_join(replacement_data %>% select(Previous_Rank = rank, -Week, Season, Team_target))
full_data = full_data %>% filter(Season == season, Week != (week+1))
full_data = full_data %>% bind_rows(full_data_s_next_w)
}
# update previous_rank and rank_change after bye week
team_game_rank_before_bye = full_data %>% filter(is.na(Previous_Rank), is.na(Rank_change)) %>% mutate(Week = Week - 2) %>% select(Team_target, rank) %>% arrange(Team_target)
team_game_week_after_bye = full_data %>% filter(is.na(Previous_Rank), is.na(Rank_change)) %>% select(-Previous_Rank, Rank_change) %>% arrange(Team_target) %>% mutate(Previous_Rank = team_game_rank_before_bye$rank, Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(!is.na(Previous_Rank), !is.na(Rank_change))
full_data = full_data %>% bind_rows(team_game_week_after_bye)
library(caret)
library(tidyverse)
games_context = read_csv("games_context.csv")
train = games_context %>% filter(Season <= 2014)
test = games_context %>% filter(Season > 2014)
test_clean_data = test %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
train_clean_data = train %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = train_clean_data, method = "lm", trControl = ctrl, metric="Rsquared")
residuals = resid(lmCVFit)
predictedValues = predict(lmCVFit)
predictedVal = predict(lmCVFit, test_clean_data)
modelvalues = data.frame(obs = test_clean_data$Rank_change, pred=predictedVal)
plot(train_clean_data$Rank_change, residuals)
plot(varImp(lmCVFit))
defaultSummary(modelvalues)
saveRDS(lmCVFit, "power_ranking_variations.rds")
prediction = predict(lmCVFit, test)
test_human_based = bind_cols(test, Prediction_change = prediction)
next_rank = test_human_based %>% group_by(Season, Week) %>% mutate(model_rank = (Previous_Rank + Prediction_change) %>% rank())
corr = next_rank %>% group_by(Season, Week) %>% summarise(Correlation = cor.test(rank, model_rank, method = "spearman", alternative = "two.sided")$estimate)
pure_ranking = data_frame(time = next_rank$Team_target, temp = next_rank$Season, semana = next_rank$Week, rank_espn = next_rank$rank, rank_modelo = next_rank$model_rank)
update_data_frame = function(full_data, replacement_data){
full_data = test_machine_based
replacement_data = new_rank
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
# update rank_change
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w = full_data_s_w %>% right_join(replacement_data) %>% mutate(Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(Season == season, Week != week)
full_data = full_data %>% bind_rows(full_data_s_w)
# update previous_rank of next week
if((week+1) <= max(full_data$Week)){
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
full_data_s_next_w = full_data_s_next_w %>% right_join(replacement_data %>% select(Previous_Rank = rank, -Week, Season, Team_target))
full_data = full_data %>% filter(Season == season, Week != (week+1))
full_data = full_data %>% bind_rows(full_data_s_next_w)
}
# update previous_rank and rank_change after bye week
team_game_rank_before_bye = full_data %>% filter(is.na(Previous_Rank), is.na(Rank_change)) %>% mutate(Week = Week - 2) %>% select(Team_target, rank) %>% arrange(Team_target)
team_game_week_after_bye = full_data %>% filter(is.na(Previous_Rank), is.na(Rank_change)) %>% select(-Previous_Rank, Rank_change) %>% arrange(Team_target) %>% mutate(Previous_Rank = team_game_rank_before_bye$rank, Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(!is.na(Previous_Rank), !is.na(Rank_change))
full_data = full_data %>% bind_rows(team_game_week_after_bye)
return(full_data)
}
test_machine_based = test
max_season = max(test_machine_based$Season)
min_season = min(test_machine_based$Season)
max_week = max(test_machine_based$Week)
min_week = min(test_machine_based$Week)
s=2015
w=1
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
w=2
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
w=3
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
w=4
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
full_data = test_machine_based
replacement_data = new_rank
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
s=2015
w=3
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
full_data = test_machine_based
library(caret)
library(tidyverse)
games_context = read_csv("games_context.csv")
train = games_context %>% filter(Season <= 2014)
test = games_context %>% filter(Season > 2014)
test_clean_data = test %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
train_clean_data = train %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = train_clean_data, method = "lm", trControl = ctrl, metric="Rsquared")
residuals = resid(lmCVFit)
predictedValues = predict(lmCVFit)
predictedVal = predict(lmCVFit, test_clean_data)
modelvalues = data.frame(obs = test_clean_data$Rank_change, pred=predictedVal)
plot(train_clean_data$Rank_change, residuals)
plot(varImp(lmCVFit))
defaultSummary(modelvalues)
saveRDS(lmCVFit, "power_ranking_variations.rds")
prediction = predict(lmCVFit, test)
test_human_based = bind_cols(test, Prediction_change = prediction)
next_rank = test_human_based %>% group_by(Season, Week) %>% mutate(model_rank = (Previous_Rank + Prediction_change) %>% rank())
corr = next_rank %>% group_by(Season, Week) %>% summarise(Correlation = cor.test(rank, model_rank, method = "spearman", alternative = "two.sided")$estimate)
pure_ranking = data_frame(time = next_rank$Team_target, temp = next_rank$Season, semana = next_rank$Week, rank_espn = next_rank$rank, rank_modelo = next_rank$model_rank)
update_data_frame = function(full_data, replacement_data){
full_data = test_machine_based
replacement_data = new_rank
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
# update rank_change
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w = full_data_s_w %>% right_join(replacement_data) %>% mutate(Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(Season == season, Week != week)
full_data = full_data %>% bind_rows(full_data_s_w)
# update previous_rank of next week
if((week+1) <= max(full_data$Week)){
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
full_data_s_next_w = full_data_s_next_w %>% right_join(replacement_data %>% select(Previous_Rank = rank, -Week, Season, Team_target))
full_data = full_data %>% filter(Season == season, Week != (week+1))
full_data = full_data %>% bind_rows(full_data_s_next_w)
}
# update previous_rank and rank_change after bye week
team_game_rank_before_bye = full_data %>% filter(is.na(Previous_Rank), is.na(Rank_change)) %>% mutate(Week = Week - 2) %>% select(Team_target, rank) %>% arrange(Team_target)
team_game_week_after_bye = full_data %>% filter(is.na(Previous_Rank), is.na(Rank_change)) %>% select(-Previous_Rank, Rank_change) %>% arrange(Team_target) %>% mutate(Previous_Rank = team_game_rank_before_bye$rank, Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(!is.na(Previous_Rank), !is.na(Rank_change))
full_data = full_data %>% bind_rows(team_game_week_after_bye)
return(full_data)
}
s=2015
w=1
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = test
max_season = max(test_machine_based$Season)
min_season = min(test_machine_based$Season)
max_week = max(test_machine_based$Week)
min_week = min(test_machine_based$Week)
s=2015
w=1
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
w=2
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
w=3
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
test_machine_based = update_data_frame(test_machine_based, new_rank)
w=4
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
full_data = test_machine_based
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
season
full_data = test_machine_based
replacement_data = new_rank
full_data
replacement_data
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
week
# update rank_change
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w
View(replacement_data)
week_games
library(tidyverse)
game_results = read_csv("nfl_game_results.csv")
game_results = game_results %>% select(Date, `Home Team`, `Away Team`, `Home Score`, `Away Score`)
get_season = function(date){
month = format(date, "%m") %>% as.integer()
year = format(date, "%Y") %>% as.integer()
if(month < 3){
return(year - 1)
}
return(year)
}
game_results = game_results %>% rowwise %>% mutate(Season = get_season(Date))
get_week = function(dates){
DAY_BEFORE = 1
dif_of_weeks = difftime(dates, min(dates)-DAY_BEFORE, units = "weeks") %>% as.integer()
week = dif_of_weeks + 1
week
}
game_results = game_results %>% group_by(Season) %>% mutate(Week = get_week(Date))
game_results$Day_of_week = weekdays(game_results$Date)
game_results$Type = with(game_results, if_else(Week <= 17, "Regular Season",
if_else(Week == 18, "Wild Card",
if_else(Week == 19, "Divisional",
if_else(Week == 20, "Conference",
"Super Bowl")))))
View(game_results)
library(caret)
library(tidyverse)
games_context = read_csv("games_context.csv")
train = games_context %>% filter(Season <= 2014)
test = games_context %>% filter(Season > 2014)
test_clean_data = test %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
train_clean_data = train %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary)
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = train_clean_data, method = "lm", trControl = ctrl, metric="Rsquared")
residuals = resid(lmCVFit)
predictedValues = predict(lmCVFit)
predictedVal = predict(lmCVFit, test_clean_data)
modelvalues = data.frame(obs = test_clean_data$Rank_change, pred=predictedVal)
plot(train_clean_data$Rank_change, residuals)
plot(varImp(lmCVFit))
defaultSummary(modelvalues)
saveRDS(lmCVFit, "power_ranking_variations.rds")
prediction = predict(lmCVFit, test)
test_human_based = bind_cols(test, Prediction_change = prediction)
next_rank = test_human_based %>% group_by(Season, Week) %>% mutate(model_rank = (Previous_Rank + Prediction_change) %>% rank())
corr = next_rank %>% group_by(Season, Week) %>% summarise(Correlation = cor.test(rank, model_rank, method = "spearman", alternative = "two.sided")$estimate)
pure_ranking = data_frame(time = next_rank$Team_target, temp = next_rank$Season, semana = next_rank$Week, rank_espn = next_rank$rank, rank_modelo = next_rank$model_rank)
test_machine_based = test
min_season = min(test_machine_based$Season)
max_week = max(test_machine_based$Week)
min_week = min(test_machine_based$Week)
s=2015
w=1
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target)
new_rank
prediction_s_w
s=2015
w=4
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
prediction_s_w
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
new_rank
week_games
setdiff(week_games$Team_target,test_machine_based$Team_target %>% unique())
all_teams = test_machine_based$Team_target %>% unique()
setdiff(all_teams, week_games$Team_target)
bye_teams = setdiff(all_teams, week_games$Team_target)
test_machine_based %>% filter(max(Week), Team_target %in% bye_teams)
test_machine_based %>% filter(Week == w, Team_target %in% bye_teams)
test_machine_based %>% filter(Week == (w-1), Team_target %in% bye_teams)
bye_teams_rank = test_machine_based %>% filter(Week == (w-1), Team_target %in% bye_teams) %>% select(Team_target, rank)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
new_rank
partial_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(partial_rank = (prediction_s_w + week_games$Previous_Rank) %>% rank())
partial_rank
partial_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(partial_rank = (prediction_s_w + week_games$Previous_Rank) %>% rank()) %>% arrange(partial_rank)
partial_rank
bye_teams_rank
partial_rank
partial_rank$Team_target
final_rank = partial_rank$Team_target
probes <- rep(TRUE, 15)
probes
probes <- append(probes, FALSE, after=5)
probes
probes <- append(probes, FALSE, after=10)
probes
probes <- append(probes, FALSE, after=0)
probes
?append
append(1:10, 11:12, c(11,12))
append(1:10, 11:12, c(11))
bye_teams
bye_teams
bye_teams_rank
elements_to_insert = bye_teams_rank$Team_target
elements_to_insert = bye_teams_rank$Team_target
position_to_insert = bye_teams_rank$rank
vector = partial_rank$Team_target
vector
for(pos in 1:n){
vector %>% append(elements_to_insert[pos-1],position[pos-1])
}
for(pos in 1:n){
vector %>% append(elements_to_insert[pos],position[pos-1])
}
for(pos in 1:n){
vector %>% append(elements_to_insert[pos],(position_to_insert[pos]-1))
}
elements_to_insert[pos]
for(pos in 1:n){
vector %>% append(elements_to_insert[pos],(position_to_insert[pos]-1))
}
pos
pos = 1
vector %>% append(elements_to_insert[pos],(position_to_insert[pos]-1))
pos = 2
vector %>% append(elements_to_insert[pos],(position_to_insert[pos]-1))
1:n
n = nrow(bye_teams_rank)
vector = partial_rank$Team_target
elements_to_insert = bye_teams_rank$Team_target
position_to_insert = bye_teams_rank$rank
for(pos in 1:n){
vector %>% append(elements_to_insert[pos],(position_to_insert[pos]-1))
}
vector
n = nrow(bye_teams_rank)
vector = partial_rank$Team_target
elements_to_insert = bye_teams_rank$Team_target
position_to_insert = bye_teams_rank$rank
for(pos in 1:n){
vector = vector %>% append(elements_to_insert[pos],(position_to_insert[pos]-1))
}
vector
insert_at_position = function(vector, bye_teams_rank){
n = nrow(bye_teams_rank)
vector = partial_rank$Team_target
elements_to_insert = bye_teams_rank$Team_target
position_to_insert = bye_teams_rank$rank
for(pos in 1:n){
vector = vector %>% append(elements_to_insert[pos],(position_to_insert[pos]-1))
}
return(vector)
}
insert_at_position = function(vector, bye_teams_rank){
n = nrow(bye_teams_rank)
vector = partial_rank$Team_target
elements_to_insert = bye_teams_rank$Team_target
position_to_insert = bye_teams_rank$rank
for(pos in 1:n){
vector = vector %>% append(elements_to_insert[pos],(position_to_insert[pos]-1))
}
return(vector)
}
all_teams = test_machine_based$Team_target %>% unique()
bye_teams = setdiff(all_teams, week_games$Team_target)
bye_teams_rank = test_machine_based %>% filter(Week == (w-1), Team_target %in% bye_teams) %>% select(Team_target, rank)
partial_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(partial_rank = (prediction_s_w + week_games$Previous_Rank) %>% rank()) %>% arrange(partial_rank)
which(vector)
position = data_frame(Team_target = vector, rank = 1:32)
position
final_rank_position = insert_at_position(partial_rank$Team_target, bye_teams_rank)
final_rank_position
final_rank
final_rank = data_frame(Season = partial_rank$Season %>% unique(), Week = partial_rank$Week, Teams_target = final_rank_position, rank = 1:32)
partial_rank$Season %>% unique()
final_rank = data_frame(Season = partial_rank$Season %>% unique(), Week = partial_rank$Week %>% unique(), Teams_target = final_rank_position, rank = 1:32)
final_rank
week_games = test_machine_based %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = get_rank(test_machine_based, week_games, prediction_s_w))
get_rank <- function(test_machine_based, week_games, prediction_s_w){
insert_at_position = function(vector, bye_teams_rank){
n = nrow(bye_teams_rank)
vector = partial_rank$Team_target
elements_to_insert = bye_teams_rank$Team_target
position_to_insert = bye_teams_rank$rank
for(pos in 1:n){
vector = vector %>% append(elements_to_insert[pos],(position_to_insert[pos]-1))
}
return(vector)
}
all_teams = test_machine_based$Team_target %>% unique()
bye_teams = setdiff(all_teams, week_games$Team_target)
bye_teams_rank = test_machine_based %>% filter(Week == (w-1), Team_target %in% bye_teams) %>% select(Team_target, rank)
partial_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(partial_rank = (prediction_s_w + week_games$Previous_Rank) %>% rank()) %>% arrange(partial_rank)
final_rank_position = insert_at_position(partial_rank$Team_target, bye_teams_rank)
final_rank = data_frame(Season = partial_rank$Season %>% unique(), Week = partial_rank$Week %>% unique(), Teams_target = final_rank_position, rank = 1:32)
return(final_rank)
}
new_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(rank = get_rank(test_machine_based, week_games, prediction_s_w))
week_games %>% select(Season, Week, Team_target)
new_rank = rank = get_rank(test_machine_based, week_games, prediction_s_w)
new_rank = get_rank(test_machine_based, week_games, prediction_s_w)
new_rank
update_data_frame = function(full_data, replacement_data){
full_data = test_machine_based
replacement_data = new_rank
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
# update rank_change
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w = full_data_s_w %>% right_join(replacement_data) %>% mutate(Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(Season == season, Week != week)
full_data = full_data %>% bind_rows(full_data_s_w)
# update previous_rank of next week
if((week+1) <= max(full_data$Week)){
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
full_data_s_next_w = full_data_s_next_w %>% right_join(replacement_data %>% select(Previous_Rank = rank, -Week, Season, Team_target))
full_data = full_data %>% filter(Season == season, Week != (week+1))
full_data = full_data %>% bind_rows(full_data_s_next_w)
}
# update previous_rank and rank_change after bye week
# team_game_rank_before_bye = full_data %>% filter(is.na(Previous_Rank), is.na(Rank_change)) %>% mutate(Week = Week - 2) %>% select(Team_target, rank) %>% arrange(Team_target)
# team_game_week_after_bye = full_data %>% filter(is.na(Previous_Rank), is.na(Rank_change)) %>% select(-Previous_Rank, Rank_change) %>% arrange(Team_target) %>% mutate(Previous_Rank = team_game_rank_before_bye$rank, Rank_change = rank - Previous_Rank)
#
# full_data = full_data %>% filter(!is.na(Previous_Rank), !is.na(Rank_change))
# full_data = full_data %>% bind_rows(team_game_week_after_bye)
return(full_data)
}
test_machine_based = update_data_frame(test_machine_based, new_rank)
