a = bind_rows(a)
View(a)
get_number_of_correct_games = function(diff, test){
test = test %>% filter(Rank_difference_before_game == diff)
models_correct = test %>% filter(Game_winner == model_expected_winner) %>% group_by(Season, Week) %>% summarise(model_correct = n()/2)
humans_correct = test %>% filter(Game_winner == human_expected_winner) %>% group_by(Season, Week) %>% summarise(human_correct = n()/2)
games_per_week = test %>% group_by(Season, Week) %>% summarise(n_games = n()/2)
n_games_correct = games_per_week %>%
left_join(humans_correct) %>% left_join(models_correct) %>%
mutate_all(funs_(~replace(., is.na(.),0)))
n_games_correct = n_games_correct %>%
mutate(model_correct_percent = model_correct/n_games,
human_correct_percent = human_correct/n_games,
Rank_diff = diff)
}
min_diff = test$Rank_difference_before_game %>% min()
max_diff = test$Rank_difference_before_game %>% max()
a = min_diff:max_diff %>% lapply(get_number_of_correct_games, test)
a = bind_rows(a)
View(a)
a = min_diff:max_diff %>% lapply(get_number_of_correct_games, test)
a = bind_rows(a)
View(a)
n_games_correct %>% ggplot() + geom_line(aes(Week, n_games, color = "Total games")) + geom_point(aes(Week, n_games, color = "Total games")) + geom_line(aes(Week, human_correct, color = "Human correct")) + geom_point(aes(Week, human_correct, color = "Human correct")) + geom_line(aes(Week, model_correct, color = "Model correct")) + geom_point(aes(Week, model_correct, color = "Model correct"))
View(a)
get_number_of_correct_games = function(diff, test){
test = test %>% filter(Rank_difference_before_game == diff)
models_correct = test %>% filter(Game_winner == model_expected_winner) %>% group_by(Season, Week) %>% summarise(model_correct = n()/2)
humans_correct = test %>% filter(Game_winner == human_expected_winner) %>% group_by(Season, Week) %>% summarise(human_correct = n()/2)
games_per_week = test %>% group_by(Season, Week) %>% summarise(n_games = n()/2)
n_games_correct = games_per_week %>%
left_join(humans_correct) %>% left_join(models_correct) %>%
mutate_all(funs_(~replace(., is.na(.),0)))
n_games_correct = n_games_correct %>%
mutate(model_correct_percent = model_correct/n_games,
human_correct_percent = human_correct/n_games,
Rank_diff = diff)
}
get_number_of_correct_games = function(diff, test){
test = test %>% filter(Rank_difference_before_game == diff)
models_correct = test %>% filter(Game_winner == model_expected_winner) %>% group_by(Season, Week) %>% summarise(model_correct = n()/2)
humans_correct = test %>% filter(Game_winner == human_expected_winner) %>% group_by(Season, Week) %>% summarise(human_correct = n()/2)
games_per_week = test %>% group_by(Season, Week) %>% summarise(n_games = n()/2)
n_games_correct = games_per_week %>%
left_join(humans_correct) %>% left_join(models_correct) %>%
mutate_all(funs_(~replace(., is.na(.),0)))
n_games_correct = n_games_correct %>%
mutate(model_correct_percent = model_correct/n_games,
human_correct_percent = human_correct/n_games,
Rank_diff = diff)
return(n_games_correct)
}
correct_games_per_week_rankDif = min_diff:max_diff %>% lapply(get_number_of_correct_games, test)
correct_games_per_week_rankDif = bind_rows(correct_games_per_week_rankDif)
correct_games_per_week_rankDif
correct_games_per_week_rankDif %>% group_by(Rank_diff) %>% mutate_all(sum())
correct_games_per_week_rankDif %>% group_by(Rank_diff) %>% mutate_all(funs_(sum()))
correct_games_per_week_rankDif %>% group_by(Rank_diff) %>% mutate_all(funs(~sum()))
correct_games_per_week_rankDif %>% group_by(Season, Rank_diff) %>% mutate_all(funs(~sum()))
correct_games_per_week_rankDif %>% select(-Week, -Season) %>% group_by(Season, Rank_diff) %>% mutate_all(funs(~sum()))
sum(correct_games_per_week_rankDif$n_games)
correct_games_per_week_rankDif %>% select(-Week, -Season) %>% group_by(Season, Rank_diff) %>% mutate_all(funs(~sum()))
correct_games_per_week_rankDif %>% select(-Week, -Season) %>% group_by(Season, Rank_diff) %>% mutate_all(funs(sum()))
correct_games_per_week_rankDif %>% ungroup() %>% select(-Week, -Season) %>% group_by(Season, Rank_diff) %>% mutate_all(funs(sum()))
correct_games_per_week_rankDif %>% ungroup() %>% select(-Week, -Season) %>% group_by(Rank_diff) %>% mutate_all(funs(sum()))
correct_games_per_week_rankDif %>% ungroup() %>% select(-Week, -Season) %>% group_by(Rank_diff) %>% mutate_all(funs(~sum()))
correct_games_per_week_rankDif %>% ungroup() %>% select(-Week, -Season)
correct_games_per_week_rankDif %>% ungroup() %>% select(-Week, -Season) %>% group_by(Rank_diff) %>% mutate_each(funs(sum()))
correct_games_per_week_rankDif %>% ungroup() %>% select(-Week, -Season) %>% group_by(Rank_diff) %>% mutate_all(funs(sum()))
correct_games_per_week_rankDif %>% ungroup() %>% select(-Week, -Season) %>% group_by(Rank_diff) %>% mutate_all(sum))
correct_games_per_week_rankDif %>% ungroup() %>% select(-Week, -Season) %>% group_by(Rank_diff) %>% mutate_all(sum)
correct_games_per_week_rankDif %>% select(n_games, human_correct, model_correct, Rank_diff) %>% group_by(Rank_diff) %>% mutate_all(sum)
correct_games_per_week_rankDif %>% ungroup() %>% select(n_games, human_correct, model_correct, Rank_diff) %>% group_by(Rank_diff) %>% mutate_all(sum)
correct_games_per_week_rankDif %>% ungroup() %>% select(n_games, human_correct, model_correct, Rank_diff) %>% group_by(Rank_diff) %>% summarise_all(sum)
rm(list = ls())
# load packages
library(dplyr)
library(ggplot2)
# create a fake data set
## some preparation
set.seed(123)
ten_positive_rand_numbers <- abs(rnorm(10)) + 0.1
the_prob <- ten_positive_rand_numbers / sum(ten_positive_rand_numbers)
fk_data <- data.frame(job_type = sample(LETTERS[1:10], 1000,
replace = TRUE, prob = the_prob),
gender = sample(c("Male", "Female"), 1000,
replace = TRUE))
# prepare data for plotting
plotting_df <-
fk_data %>%
group_by(job_type, gender) %>%
summarise(Freq = n()) %>%
# a trick!
mutate(Freq = if_else(gender == "Male", -Freq, Freq))
## find the order
temp_df <-
plotting_df %>%
filter(gender == "Female") %>%
arrange(Freq)
the_order <- temp_df$job_type
# plot
p <-
plotting_df %>%
ggplot(aes(x = job_type, y = Freq, group = gender, fill = gender)) +
geom_bar(stat = "identity", width = 0.75) +
coord_flip() +
scale_x_discrete(limits = the_order) +
# another trick!
scale_y_continuous(breaks = seq(-150, 150, 50),
labels = abs(seq(-150, 150, 50))) +
labs(x = "Job type", y = "Count", title = "Back-to-back bar chart") +
theme(legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill =  "grey90")) +
# reverse the order of items in legend
# guides(fill = guide_legend(reverse = TRUE)) +
# change the default colors of bars
scale_fill_manual(values=c("red", "blue"),
name="",
breaks=c("Male", "Female"),
labels=c("Male", "Female"))
print(p)
# prepare data for plotting
plotting_df <-
fk_data %>%
group_by(job_type, gender) %>%
summarise(Freq = n()) %>%
# a trick!
mutate(Freq = if_else(gender == "Male", -Freq, Freq))
plotting_df
View(plotting_df)
print(p)
testData <-
data.frame(
value = rnorm(1000, 10, 2)
, direction = sample(c("UP","DOWN")
, 1000
, TRUE)
)
toPlot <-
testData %>%
mutate(bin = cut(value, pretty(value, 20))) %$%
table(bin, direction) %>%
as.data.frame() %>%
mutate(plotVal = ifelse(direction == "DOWN"
, -1*Freq
, Freq))
toPlot %>%
ggplot(aes(x = bin
, y = plotVal
, fill = direction)) +
geom_col()
testData
toPlot
a = correct_games_per_week_rankDif %>% ungroup() %>% select(n_games, human_correct, model_correct, Rank_diff) %>% group_by(Rank_diff) %>% summarise_all(sum)
correct_games_per_week_rankDif %>% ungroup() %>% select(n_games, human_correct, model_correct, Rank_diff) %>% group_by(Rank_diff) %>% summarise_all(sum)
library(caret)
library(tidyverse)
insert_at_position = function(vector, bye_teams_rank){
n = nrow(bye_teams_rank)
elements_to_insert = bye_teams_rank$Team_target
position_to_insert = bye_teams_rank$rank
for(pos in 1:n){
vector = vector %>% append(elements_to_insert[pos],(position_to_insert[pos]-1))
}
return(vector)
}
get_week_rank <- function(test_machine_based, week_games, prediction_s_w, week){
all_teams = test_machine_based$Team_target %>% unique()
bye_teams = setdiff(all_teams, week_games$Team_target)
bye_teams_rank = test_machine_based %>% filter(Week == (week-1), Team_target %in% bye_teams) %>% select(Team_target, rank)
partial_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(partial_rank = (prediction_s_w + week_games$Previous_Rank) %>% rank()) %>% arrange(partial_rank)
final_rank_position = partial_rank$Team_target
if(length(final_rank_position)!= 32){ #32 total of teams
final_rank_position = insert_at_position(partial_rank$Team_target, bye_teams_rank)
}
final_rank = data_frame(Season = partial_rank$Season %>% unique(), Week = partial_rank$Week %>% unique(), Team_target = final_rank_position, rank = 1:32)
return(final_rank)
}
update_data_frame = function(full_data, replacement_data, update_next_week){
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
# update rank_change
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w = full_data_s_w %>% right_join(replacement_data) %>% mutate(Previous_Rank = if_else(is.na(Previous_Rank),rank,Previous_Rank), Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(Season == season, Week != week)
full_data = full_data %>% bind_rows(full_data_s_w)
# update previous_rank of next week
if(((week+1) <= max(full_data$Week)) & update_next_week){
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
full_data_s_next_w = full_data_s_next_w %>% right_join(replacement_data %>% select(Previous_Rank = rank, -Week, Season, Team_target))
full_data = full_data %>% filter(Season == season, Week != (week+1))
full_data = full_data %>% bind_rows(full_data_s_next_w)
}
return(full_data)
}
get_full_rank = function(test, update_next_week = T){
test_rank = test
max_season = max(test_rank$Season)
min_season = min(test_rank$Season)
max_week = max(test_rank$Week)
min_week = min(test_rank$Week)
for(s in min_season:max_season){
for(w in min_week:max_week){
week_games = test_rank %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = get_week_rank(test_rank, week_games, prediction_s_w, w)
test_rank = update_data_frame(test_rank, new_rank, update_next_week = T)
}
}
test_rank = test_rank %>% select(Season, Week, Team_target, rank, Previous_Rank, Rank_change)
}
get_winner_based_on_power_rank = function(power_ranking, home_team, adversary, season, week){
pw = power_ranking %>% filter(Week == week, Season == season)
home_rank = pw %>% filter(Team_target == home_team) %>% select(Previous_Rank) %>% as.integer()
adversary_rank = pw %>% filter(Team_target == adversary) %>% select(Previous_Rank) %>% as.integer()
if(home_rank > adversary_rank){
return(home_team)
}
return(adversary)
}
get_number_of_correct_games = function(diff, test){
test = test %>% filter(Rank_difference_before_game == diff)
models_correct = test %>% filter(Game_winner == model_expected_winner) %>% group_by(Season, Week) %>% summarise(model_correct = n()/2)
humans_correct = test %>% filter(Game_winner == human_expected_winner) %>% group_by(Season, Week) %>% summarise(human_correct = n()/2)
games_per_week = test %>% group_by(Season, Week) %>% summarise(n_games = n()/2)
n_games_correct = games_per_week %>%
left_join(humans_correct) %>% left_join(models_correct) %>%
mutate_all(funs_(~replace(., is.na(.),0)))
n_games_correct = n_games_correct %>%
mutate(model_correct_percent = model_correct/n_games,
human_correct_percent = human_correct/n_games,
Rank_diff = diff)
return(n_games_correct)
}
games_context = read_csv("games_context.csv")
power_rankings = read_csv("power_rankings.csv")
power_rankings = power_rankings %>% select(Team_target = team, Season = year, Week = week, human_rank = rank, Previous_Rank, Rank_change) %>% filter(Season == 2015, Week %in% 1:17)
power_rankings$Week = power_rankings$Week %>% as.integer()
train = games_context %>% filter(Season <= 2014)
test = games_context %>% filter(Season > 2014)
test_clean_data = test %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary, -Game_winner, -Rank_difference_before_game)
train_clean_data = train %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary, -Game_winner, -Rank_difference_before_game)
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = train_clean_data, method = "lm", trControl = ctrl, metric="Rsquared")
residuals = resid(lmCVFit)
predictedValues = predict(lmCVFit)
predictedVal = predict(lmCVFit, test_clean_data)
modelvalues = data.frame(obs = test_clean_data$Rank_change, pred=predictedVal)
plot(train_clean_data$Rank_change, residuals)
plot(varImp(lmCVFit))
defaultSummary(modelvalues)
saveRDS(lmCVFit, "power_ranking_variations.rds")
test_human_based = get_full_rank(test, update_next_week = F)
model_rank = test_human_based %>% select(Season, Week, Team_target, model_rank = rank)
ranks = power_rankings %>% inner_join(model_rank) %>% arrange(Season, Week, model_rank)
corr_1 = ranks %>% group_by(Season, Week) %>% summarise(Correlation = cor.test(human_rank, model_rank, method = "spearman", alternative = "two.sided")$estimate)
test_machine_based = get_full_rank(test)
model_rank = test_machine_based %>% select(Season, Week, Team_target, model_rank = rank)
ranks = power_rankings %>% inner_join(model_rank) %>% arrange(Season, Week, model_rank)
corr_2 = ranks %>% group_by(Season, Week) %>% summarise(Correlation = cor.test(human_rank, model_rank, method = "spearman", alternative = "two.sided")$estimate)
expected_winner_model = test %>% rowwise() %>% do(expected_winner = get_winner_based_on_power_rank(test_machine_based, .$Team_target, .$Team_adversary, .$Season, .$Week ))
expected_winner_human = test %>% rowwise() %>% do(expected_winner = get_winner_based_on_power_rank(power_rankings, .$Team_target, .$Team_adversary, .$Season, .$Week ))
test = test %>% mutate(model_expected_winner = expected_winner_model$expected_winner %>% unlist(), human_expected_winner = expected_winner_human$expected_winner %>% unlist())
min_diff = test$Rank_difference_before_game %>% min()
max_diff = test$Rank_difference_before_game %>% max()
correct_games_per_week_rankDif = min_diff:max_diff %>% lapply(get_number_of_correct_games, test)
correct_games_per_week_rankDif = bind_rows(correct_games_per_week_rankDif)
correct_games_per_week_rankDif %>% ungroup() %>% select(n_games, human_correct, model_correct, Rank_diff) %>% group_by(Rank_diff) %>% summarise_all(sum)
a = correct_games_per_week_rankDif %>% ungroup() %>% select(n_games, human_correct, model_correct, Rank_diff) %>% group_by(Rank_diff) %>% summarise_all(sum)
View(a)
testData <-
data.frame(
value = rnorm(1000, 10, 2)
, direction = sample(c("UP","DOWN")
, 1000
, TRUE)
)
toPlot <-
testData %>%
mutate(bin = cut(value, pretty(value, 20))) %$%
table(bin, direction) %>%
as.data.frame() %>%
mutate(plotVal = ifelse(direction == "DOWN"
, -1*Freq
, Freq))
toPlot %>%
ggplot(aes(x = bin
, y = plotVal
, fill = direction)) +
geom_col()
View(toPlot)
correct_games_per_week_rankDif
library(reshape)
View(a)
mdata <- melt(a, id=c("Rank_diff","n_games"))
a
mdata <- melt(a, id=c("Rank_diff","n_games"))
library(reshape)
mdata <- melt(a, id=c("Rank_diff","n_games"))
a
mdata <- melt(a, id=c("Rank_diff","n_games"))
library(data.table)
mdata <- melt(a %>% as.data.table(), id=c("Rank_diff","n_games"))
mdata
toPlot
toPlot %>%
ggplot(aes(x = bin
, y = plotVal
, fill = direction)) +
geom_col()
mdata %>%
ggplot(aes(x = Rank_diff
, y = value
, fill = variable)) +
geom_col()
toPlot <-
testData %>%
mutate(bin = cut(value, pretty(value, 20))) %$%
table(bin, direction) %>%
as.data.frame() %>%
mutate(plotVal = ifelse(direction == "DOWN"
, -1*Freq
, Freq))
toPlot
a = correct_games_per_week_rankDif %>% ungroup() %>% select(n_games, human_correct, model_correct, Rank_diff) %>% group_by(Rank_diff) %>% summarise_all(sum)
a$model_correct = -1*a$model_correct
a
mdata <- melt(a %>% as.data.table(), id=c("Rank_diff","n_games"))
mdata %>%
ggplot(aes(x = Rank_diff
, y = value
, fill = variable)) +
geom_col()
mdata
mdata <- melt(a %>% as.data.table(), id=c("Rank_diff"))
mdata %>%
ggplot(aes(x = Rank_diff
, y = value
, fill = variable)) +
geom_col()
mdata <- melt(a %>% as.data.table(), id=c("Rank_diff","n_games"))
mdata
a = correct_games_per_week_rankDif %>% ungroup() %>% select(n_games, human_correct, model_correct, Rank_diff) %>% group_by(Rank_diff) %>% summarise_all(sum)
library(reshape)
library(data.table)
a$model_correct = -1*a$model_correct
mdata <- melt(a %>% as.data.table(), id=c("Rank_diff","n_games"))
a
mdata <- melt(a %>% as.data.table(), id=c("Rank_diff","n_games"))
mdata
mdata <- melt(a %>% as.data.table(), id=c("Rank_diff"))
mdata
n_games_refact = mdata %>% filter(variable == "n_games")
n_games_refact
n_games_complement = n_games_refact
n_games_complement$value = -1*n_games_complement$value
n_games_complement
n_games_refact = mdata %>% filter(variable != "n_games")
n_games_refact
n_games_complement
n_games_complement %>%
ggplot(aes(x = Rank_diff
, y = value
, fill = variable)) +
geom_col()
n_games_refact
n_games_refact = mdata %>% filter(variable == "n_games")
mdata <- melt(a %>% as.data.table(), id=c("Rank_diff"))
n_games_refact = mdata %>% filter(variable == "n_games")
n_games_complement = n_games_refact
n_games_complement
n_games_complement %>% bind_rows(n_games_complement$value = -1*n_games_complement$value)
mdata <- melt(a %>% as.data.table(), id=c("Rank_diff"))
n_games_correct = mdata %>% filter(variable == "n_games")
n_games_complement = n_games_correct
n_games_correct = mdata %>% filter(variable != "n_games")
n_games_correct
a$model_correct = -1*a$model_correct
a
a
mdata <- melt(a %>% as.data.table(), id=c("Rank_diff","n_games"))
mdata
mdata2 = mdata
mdata2$n_games = -1*mdata2$n_games
mdata2
mdata %>% bind_rows(mdata2)
a = correct_games_per_week_rankDif %>% ungroup() %>% select(n_games, human_correct, model_correct, Rank_diff) %>% group_by(Rank_diff) %>% summarise_all(sum)
library(caret)
library(tidyverse)
insert_at_position = function(vector, bye_teams_rank){
n = nrow(bye_teams_rank)
elements_to_insert = bye_teams_rank$Team_target
position_to_insert = bye_teams_rank$rank
for(pos in 1:n){
vector = vector %>% append(elements_to_insert[pos],(position_to_insert[pos]-1))
}
return(vector)
}
get_week_rank <- function(test_machine_based, week_games, prediction_s_w, week){
all_teams = test_machine_based$Team_target %>% unique()
bye_teams = setdiff(all_teams, week_games$Team_target)
bye_teams_rank = test_machine_based %>% filter(Week == (week-1), Team_target %in% bye_teams) %>% select(Team_target, rank)
partial_rank = week_games %>% select(Season, Week, Team_target) %>% bind_cols(partial_rank = (prediction_s_w + week_games$Previous_Rank) %>% rank()) %>% arrange(partial_rank)
final_rank_position = partial_rank$Team_target
if(length(final_rank_position)!= 32){ #32 total of teams
final_rank_position = insert_at_position(partial_rank$Team_target, bye_teams_rank)
}
final_rank = data_frame(Season = partial_rank$Season %>% unique(), Week = partial_rank$Week %>% unique(), Team_target = final_rank_position, rank = 1:32)
return(final_rank)
}
update_data_frame = function(full_data, replacement_data, update_next_week){
season = replacement_data$Season %>% unique()
week = replacement_data$Week %>% unique()
# update rank_change
full_data_s_w = full_data %>% filter(Season == season, Week == week) %>% select(-rank, -Rank_change)
full_data_s_w = full_data_s_w %>% right_join(replacement_data) %>% mutate(Previous_Rank = if_else(is.na(Previous_Rank),rank,Previous_Rank), Rank_change = rank - Previous_Rank)
full_data = full_data %>% filter(Season == season, Week != week)
full_data = full_data %>% bind_rows(full_data_s_w)
# update previous_rank of next week
if(((week+1) <= max(full_data$Week)) & update_next_week){
full_data_s_next_w = full_data %>% filter(Season == season, Week == (week+1)) %>% select(-Previous_Rank)
full_data_s_next_w = full_data_s_next_w %>% right_join(replacement_data %>% select(Previous_Rank = rank, -Week, Season, Team_target))
full_data = full_data %>% filter(Season == season, Week != (week+1))
full_data = full_data %>% bind_rows(full_data_s_next_w)
}
return(full_data)
}
get_full_rank = function(test, update_next_week = T){
test_rank = test
max_season = max(test_rank$Season)
min_season = min(test_rank$Season)
max_week = max(test_rank$Week)
min_week = min(test_rank$Week)
for(s in min_season:max_season){
for(w in min_week:max_week){
week_games = test_rank %>% filter(Season == s, Week == w)
prediction_s_w = predict(lmCVFit, week_games)
new_rank = get_week_rank(test_rank, week_games, prediction_s_w, w)
test_rank = update_data_frame(test_rank, new_rank, update_next_week = T)
}
}
test_rank = test_rank %>% select(Season, Week, Team_target, rank, Previous_Rank, Rank_change)
}
get_winner_based_on_power_rank = function(power_ranking, home_team, adversary, season, week){
pw = power_ranking %>% filter(Week == week, Season == season)
home_rank = pw %>% filter(Team_target == home_team) %>% select(Previous_Rank) %>% as.integer()
adversary_rank = pw %>% filter(Team_target == adversary) %>% select(Previous_Rank) %>% as.integer()
if(home_rank > adversary_rank){
return(home_team)
}
return(adversary)
}
get_number_of_correct_games = function(diff, test){
test = test %>% filter(Rank_difference_before_game == diff)
models_correct = test %>% filter(Game_winner == model_expected_winner) %>% group_by(Season, Week) %>% summarise(model_correct = n()/2)
humans_correct = test %>% filter(Game_winner == human_expected_winner) %>% group_by(Season, Week) %>% summarise(human_correct = n()/2)
games_per_week = test %>% group_by(Season, Week) %>% summarise(n_games = n()/2)
n_games_correct = games_per_week %>%
left_join(humans_correct) %>% left_join(models_correct) %>%
mutate_all(funs_(~replace(., is.na(.),0)))
n_games_correct = n_games_correct %>%
mutate(model_correct_percent = model_correct/n_games,
human_correct_percent = human_correct/n_games,
Rank_diff = diff)
return(n_games_correct)
}
games_context = read_csv("games_context.csv")
power_rankings = read_csv("power_rankings.csv")
power_rankings = power_rankings %>% select(Team_target = team, Season = year, Week = week, human_rank = rank, Previous_Rank, Rank_change) %>% filter(Season == 2015, Week %in% 1:17)
power_rankings$Week = power_rankings$Week %>% as.integer()
train = games_context %>% filter(Season <= 2014)
test = games_context %>% filter(Season > 2014)
test_clean_data = test %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary, -Game_winner, -Rank_difference_before_game)
train_clean_data = train %>% ungroup() %>% select(-Date, -Team_target, -Team_adversary, -Season, -Week, -Day_of_week, -Type, -record, -record_adversary, -rank, -rank_adversary, -Rank_change_adversary, -n_ties, -n_ties_adversary, -Game_winner, -Rank_difference_before_game)
ctrl = trainControl(method = "cv", number = 10)
lmCVFit = train(Rank_change ~ ., data = train_clean_data, method = "lm", trControl = ctrl, metric="Rsquared")
residuals = resid(lmCVFit)
predictedValues = predict(lmCVFit)
predictedVal = predict(lmCVFit, test_clean_data)
modelvalues = data.frame(obs = test_clean_data$Rank_change, pred=predictedVal)
plot(train_clean_data$Rank_change, residuals)
plot(varImp(lmCVFit))
defaultSummary(modelvalues)
saveRDS(lmCVFit, "power_ranking_variations.rds")
test_human_based = get_full_rank(test, update_next_week = F)
model_rank = test_human_based %>% select(Season, Week, Team_target, model_rank = rank)
ranks = power_rankings %>% inner_join(model_rank) %>% arrange(Season, Week, model_rank)
corr_1 = ranks %>% group_by(Season, Week) %>% summarise(Correlation = cor.test(human_rank, model_rank, method = "spearman", alternative = "two.sided")$estimate)
test_machine_based = get_full_rank(test)
model_rank = test_machine_based %>% select(Season, Week, Team_target, model_rank = rank)
ranks = power_rankings %>% inner_join(model_rank) %>% arrange(Season, Week, model_rank)
corr_2 = ranks %>% group_by(Season, Week) %>% summarise(Correlation = cor.test(human_rank, model_rank, method = "spearman", alternative = "two.sided")$estimate)
expected_winner_model = test %>% rowwise() %>% do(expected_winner = get_winner_based_on_power_rank(test_machine_based, .$Team_target, .$Team_adversary, .$Season, .$Week ))
expected_winner_human = test %>% rowwise() %>% do(expected_winner = get_winner_based_on_power_rank(power_rankings, .$Team_target, .$Team_adversary, .$Season, .$Week ))
test = test %>% mutate(model_expected_winner = expected_winner_model$expected_winner %>% unlist(), human_expected_winner = expected_winner_human$expected_winner %>% unlist())
min_diff = test$Rank_difference_before_game %>% min()
max_diff = test$Rank_difference_before_game %>% max()
correct_games_per_week_rankDif = min_diff:max_diff %>% lapply(get_number_of_correct_games, test)
correct_games_per_week_rankDif = bind_rows(correct_games_per_week_rankDif)
a = correct_games_per_week_rankDif %>% ungroup() %>% select(n_games, human_correct, model_correct, Rank_diff) %>% group_by(Rank_diff) %>% summarise_all(sum)
library(reshape)
library(data.table)
a$model_correct = -1*a$model_correct
mdata <- melt(a %>% as.data.table(), id=c("Rank_diff","n_games"))
mdata2 = mdata
mdata2$n_games = -1*mdata2$n_games
mdata %>% bind_rows(mdata2)
mdata = mdata %>% bind_rows(mdata2)
mdata
library(caret)
